
Day10_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001250  08001250  00002250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800128c  0800128c  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  0800128c  0800128c  0000228c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001294  08001294  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001294  08001294  00002294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001298  08001298  00002298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800129c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000170  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000027d1  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000baf  00000000  00000000  0000584f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000007b3  00000000  00000000  000063fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000198  00000000  00000000  00006bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000125  00000000  00000000  00006d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000195fa  00000000  00000000  00006e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000028ee  00000000  00000000  0002046f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008c40b  00000000  00000000  00022d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000af168  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000007cc  00000000  00000000  000af1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  000af978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001238 	.word	0x08001238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001238 	.word	0x08001238

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <I2CStart>:
 *      Author: mayusical
 */
#include "i2c.h"

void I2CStart() {
    I2C1->CR1 |= I2C_CR1_START;
 8000270:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <I2CStart+0x14>)
 8000272:	6813      	ldr	r3, [r2, #0]
 8000274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000278:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 800027a:	6953      	ldr	r3, [r2, #20]
 800027c:	f013 0f01 	tst.w	r3, #1
 8000280:	d0fb      	beq.n	800027a <I2CStart+0xa>
}
 8000282:	4770      	bx	lr
 8000284:	40005400 	.word	0x40005400

08000288 <I2CStop>:
void I2CRepeatStart() {
	I2CStart();
}

void I2CStop() {
    I2C1->CR1 |= I2C_CR1_STOP;
 8000288:	4a04      	ldr	r2, [pc, #16]	@ (800029c <I2CStop+0x14>)
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000290:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000292:	6993      	ldr	r3, [r2, #24]
 8000294:	f013 0f02 	tst.w	r3, #2
 8000298:	d0fb      	beq.n	8000292 <I2CStop+0xa>
}
 800029a:	4770      	bx	lr
 800029c:	40005400 	.word	0x40005400

080002a0 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 80002a0:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <I2CSendSlaveAddress+0x18>)
 80002a2:	6118      	str	r0, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80002a4:	461a      	mov	r2, r3
 80002a6:	6953      	ldr	r3, [r2, #20]
 80002a8:	f013 0f02 	tst.w	r3, #2
 80002ac:	d0fb      	beq.n	80002a6 <I2CSendSlaveAddress+0x6>
    // dummy read to clear flags
    (void)I2C1->SR1;
 80002ae:	4b02      	ldr	r3, [pc, #8]	@ (80002b8 <I2CSendSlaveAddress+0x18>)
 80002b0:	695a      	ldr	r2, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 80002b2:	699b      	ldr	r3, [r3, #24]
}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40005400 	.word	0x40005400

080002bc <I2CSendData>:

void I2CSendData(uint8_t val) {
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80002bc:	4a06      	ldr	r2, [pc, #24]	@ (80002d8 <I2CSendData+0x1c>)
 80002be:	6953      	ldr	r3, [r2, #20]
 80002c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80002c4:	d0fb      	beq.n	80002be <I2CSendData+0x2>
    // write dr and clear flags
    I2C1->DR = val;
 80002c6:	4b04      	ldr	r3, [pc, #16]	@ (80002d8 <I2CSendData+0x1c>)
 80002c8:	6118      	str	r0, [r3, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80002ca:	461a      	mov	r2, r3
 80002cc:	6953      	ldr	r3, [r2, #20]
 80002ce:	f013 0f04 	tst.w	r3, #4
 80002d2:	d0fb      	beq.n	80002cc <I2CSendData+0x10>
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40005400 	.word	0x40005400

080002dc <I2CIsDeviceReady>:

int I2CIsDeviceReady(uint8_t slaveaddr) {
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
    // wait until address is sent
    I2C1->DR = slaveaddr;
 80002dc:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 80002e0:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <I2CIsDeviceReady+0x1c>)
 80002e2:	6118      	str	r0, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80002e4:	461a      	mov	r2, r3
 80002e6:	6953      	ldr	r3, [r2, #20]
 80002e8:	f013 0f02 	tst.w	r3, #2
 80002ec:	d0fb      	beq.n	80002e6 <I2CIsDeviceReady+0xa>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 80002ee:	4b02      	ldr	r3, [pc, #8]	@ (80002f8 <I2CIsDeviceReady+0x1c>)
 80002f0:	699b      	ldr	r3, [r3, #24]
	return 1;
}
 80002f2:	2001      	movs	r0, #1
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40005400 	.word	0x40005400

080002fc <I2CInit>:

void I2CInit() {
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80002fc:	4a3c      	ldr	r2, [pc, #240]	@ (80003f0 <I2CInit+0xf4>)
 80002fe:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 8000306:	2232      	movs	r2, #50	@ 0x32

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
	uint32_t init_ticks = DWT->CYCCNT;
 8000308:	4b3a      	ldr	r3, [pc, #232]	@ (80003f4 <I2CInit+0xf8>)
 800030a:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 800030c:	4b3a      	ldr	r3, [pc, #232]	@ (80003f8 <I2CInit+0xfc>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	493a      	ldr	r1, [pc, #232]	@ (80003fc <I2CInit+0x100>)
 8000312:	fba1 1303 	umull	r1, r3, r1, r3
 8000316:	099b      	lsrs	r3, r3, #6
	ms *= ticks;
 8000318:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 800031c:	4935      	ldr	r1, [pc, #212]	@ (80003f4 <I2CInit+0xf8>)
 800031e:	684b      	ldr	r3, [r1, #4]
 8000320:	1a1b      	subs	r3, r3, r0
 8000322:	4293      	cmp	r3, r2
 8000324:	d3fb      	bcc.n	800031e <I2CInit+0x22>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000326:	4a32      	ldr	r2, [pc, #200]	@ (80003f0 <I2CInit+0xf4>)
 8000328:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2); // PB6
 8000330:	4b33      	ldr	r3, [pc, #204]	@ (8000400 <I2CInit+0x104>)
 8000332:	6819      	ldr	r1, [r3, #0]
 8000334:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8000338:	6019      	str	r1, [r3, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2); // AF
 800033a:	6819      	ldr	r1, [r3, #0]
 800033c:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8000340:	6019      	str	r1, [r3, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);   // open-drain
 8000342:	6859      	ldr	r1, [r3, #4]
 8000344:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8000348:	6059      	str	r1, [r3, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2); // no pull-up/down
 800034a:	68d9      	ldr	r1, [r3, #12]
 800034c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8000350:	60d9      	str	r1, [r3, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2); // PB7
 8000352:	6819      	ldr	r1, [r3, #0]
 8000354:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8000358:	6019      	str	r1, [r3, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2); // AF
 800035a:	6819      	ldr	r1, [r3, #0]
 800035c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8000360:	6019      	str	r1, [r3, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);   // open-drain
 8000362:	6859      	ldr	r1, [r3, #4]
 8000364:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000368:	6059      	str	r1, [r3, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2); // no pull-up/down
 800036a:	68d9      	ldr	r1, [r3, #12]
 800036c:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8000370:	60d9      	str	r1, [r3, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 8000372:	6a19      	ldr	r1, [r3, #32]
 8000374:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8000378:	6219      	str	r1, [r3, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 800037a:	6a19      	ldr	r1, [r3, #32]
 800037c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8000380:	6219      	str	r1, [r3, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000382:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000384:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000388:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 800038a:	2232      	movs	r2, #50	@ 0x32
	uint32_t init_ticks = DWT->CYCCNT;
 800038c:	4b19      	ldr	r3, [pc, #100]	@ (80003f4 <I2CInit+0xf8>)
 800038e:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000390:	4b19      	ldr	r3, [pc, #100]	@ (80003f8 <I2CInit+0xfc>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4919      	ldr	r1, [pc, #100]	@ (80003fc <I2CInit+0x100>)
 8000396:	fba1 1303 	umull	r1, r3, r1, r3
 800039a:	099b      	lsrs	r3, r3, #6
	ms *= ticks;
 800039c:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003a0:	4914      	ldr	r1, [pc, #80]	@ (80003f4 <I2CInit+0xf8>)
 80003a2:	684b      	ldr	r3, [r1, #4]
 80003a4:	1a1b      	subs	r3, r3, r0
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d3fb      	bcc.n	80003a2 <I2CInit+0xa6>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 80003aa:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <I2CInit+0x108>)
 80003ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80003b0:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 80003b6:	685a      	ldr	r2, [r3, #4]
 80003b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80003bc:	605a      	str	r2, [r3, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 80003be:	69da      	ldr	r2, [r3, #28]
 80003c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80003c4:	61da      	str	r2, [r3, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80003cc:	601a      	str	r2, [r3, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 80003ce:	685a      	ldr	r2, [r3, #4]
 80003d0:	f042 0210 	orr.w	r2, r2, #16
 80003d4:	605a      	str	r2, [r3, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 80003d6:	69da      	ldr	r2, [r3, #28]
 80003d8:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80003dc:	61da      	str	r2, [r3, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 80003de:	6a1a      	ldr	r2, [r3, #32]
 80003e0:	f042 0211 	orr.w	r2, r2, #17
 80003e4:	621a      	str	r2, [r3, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	f042 0201 	orr.w	r2, r2, #1
 80003ec:	601a      	str	r2, [r3, #0]
}
 80003ee:	4770      	bx	lr
 80003f0:	40023800 	.word	0x40023800
 80003f4:	e0001000 	.word	0xe0001000
 80003f8:	20000000 	.word	0x20000000
 80003fc:	10624dd3 	.word	0x10624dd3
 8000400:	40020400 	.word	0x40020400
 8000404:	40005400 	.word	0x40005400

08000408 <LcdWriteByte>:
 *      Author: mayusical
 */

#include "i2c_lcd.h"

void LcdWriteByte(uint8_t val) {
 8000408:	b510      	push	{r4, lr}
 800040a:	4604      	mov	r4, r0
	I2CStart();
 800040c:	f7ff ff30 	bl	8000270 <I2CStart>
	I2CSendSlaveAddress(LCD_SLAVE_ADDR_W);
 8000410:	204e      	movs	r0, #78	@ 0x4e
 8000412:	f7ff ff45 	bl	80002a0 <I2CSendSlaveAddress>
	I2CSendData(val);
 8000416:	4620      	mov	r0, r4
 8000418:	f7ff ff50 	bl	80002bc <I2CSendData>
	I2CStop();
 800041c:	f7ff ff34 	bl	8000288 <I2CStop>
}
 8000420:	bd10      	pop	{r4, pc}
	...

08000424 <LcdWrite>:

void LcdWrite(uint8_t rs, uint8_t val) {
 8000424:	b570      	push	{r4, r5, r6, lr}
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 8000426:	010e      	lsls	r6, r1, #4
 8000428:	b2f6      	uxtb	r6, r6
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 800042a:	f1b0 0580 	subs.w	r5, r0, #128	@ 0x80
 800042e:	bf18      	it	ne
 8000430:	2501      	movne	r5, #1
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 8000432:	f021 010f 	bic.w	r1, r1, #15
	LcdWriteByte(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 8000436:	ea45 0401 	orr.w	r4, r5, r1
 800043a:	f044 000c 	orr.w	r0, r4, #12
 800043e:	f7ff ffe3 	bl	8000408 <LcdWriteByte>
	uint32_t init_ticks = DWT->CYCCNT;
 8000442:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <LcdWrite+0x70>)
 8000444:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000446:	4b14      	ldr	r3, [pc, #80]	@ (8000498 <LcdWrite+0x74>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	4b14      	ldr	r3, [pc, #80]	@ (800049c <LcdWrite+0x78>)
 800044c:	fba3 3202 	umull	r3, r2, r3, r2
 8000450:	0992      	lsrs	r2, r2, #6
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000452:	4910      	ldr	r1, [pc, #64]	@ (8000494 <LcdWrite+0x70>)
 8000454:	684b      	ldr	r3, [r1, #4]
 8000456:	1a1b      	subs	r3, r3, r0
 8000458:	4293      	cmp	r3, r2
 800045a:	d3fb      	bcc.n	8000454 <LcdWrite+0x30>
	DelayMs(1);
	LcdWriteByte(high | bvrs | BV(LCD_BL));
 800045c:	f044 0008 	orr.w	r0, r4, #8
 8000460:	f7ff ffd2 	bl	8000408 <LcdWriteByte>

	LcdWriteByte(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 8000464:	4335      	orrs	r5, r6
 8000466:	f045 000c 	orr.w	r0, r5, #12
 800046a:	f7ff ffcd 	bl	8000408 <LcdWriteByte>
	uint32_t init_ticks = DWT->CYCCNT;
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <LcdWrite+0x70>)
 8000470:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000472:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <LcdWrite+0x74>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b09      	ldr	r3, [pc, #36]	@ (800049c <LcdWrite+0x78>)
 8000478:	fba3 3202 	umull	r3, r2, r3, r2
 800047c:	0992      	lsrs	r2, r2, #6
	while ((DWT->CYCCNT - init_ticks) < ms);
 800047e:	4905      	ldr	r1, [pc, #20]	@ (8000494 <LcdWrite+0x70>)
 8000480:	684b      	ldr	r3, [r1, #4]
 8000482:	1a1b      	subs	r3, r3, r0
 8000484:	4293      	cmp	r3, r2
 8000486:	d3fb      	bcc.n	8000480 <LcdWrite+0x5c>
	DelayMs(1);
	LcdWriteByte(low | bvrs | BV(LCD_BL));
 8000488:	f045 0008 	orr.w	r0, r5, #8
 800048c:	f7ff ffbc 	bl	8000408 <LcdWriteByte>
}
 8000490:	bd70      	pop	{r4, r5, r6, pc}
 8000492:	bf00      	nop
 8000494:	e0001000 	.word	0xe0001000
 8000498:	20000000 	.word	0x20000000
 800049c:	10624dd3 	.word	0x10624dd3

080004a0 <LcdInit>:

// As per 4-bit initialization sequence mentioned HD44780 datasheet fig 24 (page 46)
int LcdInit() {
 80004a0:	b510      	push	{r4, lr}
	// wait for min 15 ms (for 5V)
	DelayMs(20);
 80004a2:	2214      	movs	r2, #20
	uint32_t init_ticks = DWT->CYCCNT;
 80004a4:	4b64      	ldr	r3, [pc, #400]	@ (8000638 <LcdInit+0x198>)
 80004a6:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 80004a8:	4b64      	ldr	r3, [pc, #400]	@ (800063c <LcdInit+0x19c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4964      	ldr	r1, [pc, #400]	@ (8000640 <LcdInit+0x1a0>)
 80004ae:	fba1 1303 	umull	r1, r3, r1, r3
 80004b2:	099b      	lsrs	r3, r3, #6
	ms *= ticks;
 80004b4:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 80004b8:	495f      	ldr	r1, [pc, #380]	@ (8000638 <LcdInit+0x198>)
 80004ba:	684b      	ldr	r3, [r1, #4]
 80004bc:	1a1b      	subs	r3, r3, r0
 80004be:	4293      	cmp	r3, r2
 80004c0:	d3fb      	bcc.n	80004ba <LcdInit+0x1a>
	I2CInit();
 80004c2:	f7ff ff1b 	bl	80002fc <I2CInit>
	// check if lcd is ready
	I2CStart();
 80004c6:	f7ff fed3 	bl	8000270 <I2CStart>
	int ret = I2CIsDeviceReady(LCD_SLAVE_ADDR_W);
 80004ca:	204e      	movs	r0, #78	@ 0x4e
 80004cc:	f7ff ff06 	bl	80002dc <I2CIsDeviceReady>
 80004d0:	4604      	mov	r4, r0
	I2CStop();
 80004d2:	f7ff fed9 	bl	8000288 <I2CStop>
	if(!ret)
 80004d6:	b90c      	cbnz	r4, 80004dc <LcdInit+0x3c>
	LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
	DelayMs(1);
	LcdWrite(LCD_CMD, LCD_DISP_ON);
	DelayMs(1);
	return ret;
}
 80004d8:	4620      	mov	r0, r4
 80004da:	bd10      	pop	{r4, pc}
	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 80004dc:	2034      	movs	r0, #52	@ 0x34
 80004de:	f7ff ff93 	bl	8000408 <LcdWriteByte>
	__NOP();
 80004e2:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 80004e4:	2030      	movs	r0, #48	@ 0x30
 80004e6:	f7ff ff8f 	bl	8000408 <LcdWriteByte>
	DelayMs(5);
 80004ea:	2205      	movs	r2, #5
	uint32_t init_ticks = DWT->CYCCNT;
 80004ec:	4b52      	ldr	r3, [pc, #328]	@ (8000638 <LcdInit+0x198>)
 80004ee:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 80004f0:	4b52      	ldr	r3, [pc, #328]	@ (800063c <LcdInit+0x19c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4952      	ldr	r1, [pc, #328]	@ (8000640 <LcdInit+0x1a0>)
 80004f6:	fba1 1303 	umull	r1, r3, r1, r3
 80004fa:	099b      	lsrs	r3, r3, #6
	ms *= ticks;
 80004fc:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000500:	494d      	ldr	r1, [pc, #308]	@ (8000638 <LcdInit+0x198>)
 8000502:	684b      	ldr	r3, [r1, #4]
 8000504:	1a1b      	subs	r3, r3, r0
 8000506:	4293      	cmp	r3, r2
 8000508:	d3fb      	bcc.n	8000502 <LcdInit+0x62>
	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 800050a:	2034      	movs	r0, #52	@ 0x34
 800050c:	f7ff ff7c 	bl	8000408 <LcdWriteByte>
	__NOP();
 8000510:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 8000512:	2030      	movs	r0, #48	@ 0x30
 8000514:	f7ff ff78 	bl	8000408 <LcdWriteByte>
	uint32_t init_ticks = DWT->CYCCNT;
 8000518:	4b47      	ldr	r3, [pc, #284]	@ (8000638 <LcdInit+0x198>)
 800051a:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 800051c:	4b47      	ldr	r3, [pc, #284]	@ (800063c <LcdInit+0x19c>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b47      	ldr	r3, [pc, #284]	@ (8000640 <LcdInit+0x1a0>)
 8000522:	fba3 3202 	umull	r3, r2, r3, r2
 8000526:	0992      	lsrs	r2, r2, #6
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000528:	4943      	ldr	r1, [pc, #268]	@ (8000638 <LcdInit+0x198>)
 800052a:	684b      	ldr	r3, [r1, #4]
 800052c:	1a1b      	subs	r3, r3, r0
 800052e:	4293      	cmp	r3, r2
 8000530:	d3fb      	bcc.n	800052a <LcdInit+0x8a>
	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 8000532:	2034      	movs	r0, #52	@ 0x34
 8000534:	f7ff ff68 	bl	8000408 <LcdWriteByte>
	__NOP();
 8000538:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 800053a:	2030      	movs	r0, #48	@ 0x30
 800053c:	f7ff ff64 	bl	8000408 <LcdWriteByte>
	DelayMs(3);
 8000540:	2203      	movs	r2, #3
	uint32_t init_ticks = DWT->CYCCNT;
 8000542:	4b3d      	ldr	r3, [pc, #244]	@ (8000638 <LcdInit+0x198>)
 8000544:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000546:	4b3d      	ldr	r3, [pc, #244]	@ (800063c <LcdInit+0x19c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	493d      	ldr	r1, [pc, #244]	@ (8000640 <LcdInit+0x1a0>)
 800054c:	fba1 1303 	umull	r1, r3, r1, r3
 8000550:	099b      	lsrs	r3, r3, #6
	ms *= ticks;
 8000552:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000556:	4938      	ldr	r1, [pc, #224]	@ (8000638 <LcdInit+0x198>)
 8000558:	684b      	ldr	r3, [r1, #4]
 800055a:	1a1b      	subs	r3, r3, r0
 800055c:	4293      	cmp	r3, r2
 800055e:	d3fb      	bcc.n	8000558 <LcdInit+0xb8>
	LcdWriteByte(LCD_FN_SET_4BIT | BV(LCD_EN));
 8000560:	2024      	movs	r0, #36	@ 0x24
 8000562:	f7ff ff51 	bl	8000408 <LcdWriteByte>
	__NOP();
 8000566:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_4BIT);
 8000568:	2020      	movs	r0, #32
 800056a:	f7ff ff4d 	bl	8000408 <LcdWriteByte>
	DelayMs(3);
 800056e:	2203      	movs	r2, #3
	uint32_t init_ticks = DWT->CYCCNT;
 8000570:	4b31      	ldr	r3, [pc, #196]	@ (8000638 <LcdInit+0x198>)
 8000572:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000574:	4b31      	ldr	r3, [pc, #196]	@ (800063c <LcdInit+0x19c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4931      	ldr	r1, [pc, #196]	@ (8000640 <LcdInit+0x1a0>)
 800057a:	fba1 1303 	umull	r1, r3, r1, r3
 800057e:	099b      	lsrs	r3, r3, #6
	ms *= ticks;
 8000580:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000584:	492c      	ldr	r1, [pc, #176]	@ (8000638 <LcdInit+0x198>)
 8000586:	684b      	ldr	r3, [r1, #4]
 8000588:	1a1b      	subs	r3, r3, r0
 800058a:	4293      	cmp	r3, r2
 800058c:	d3fb      	bcc.n	8000586 <LcdInit+0xe6>
	LcdWriteByte(LCD_FN_SET_4BIT_2LINES);
 800058e:	2028      	movs	r0, #40	@ 0x28
 8000590:	f7ff ff3a 	bl	8000408 <LcdWriteByte>
	uint32_t init_ticks = DWT->CYCCNT;
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <LcdInit+0x198>)
 8000596:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000598:	4b28      	ldr	r3, [pc, #160]	@ (800063c <LcdInit+0x19c>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <LcdInit+0x1a0>)
 800059e:	fba3 3202 	umull	r3, r2, r3, r2
 80005a2:	0992      	lsrs	r2, r2, #6
	while ((DWT->CYCCNT - init_ticks) < ms);
 80005a4:	4924      	ldr	r1, [pc, #144]	@ (8000638 <LcdInit+0x198>)
 80005a6:	684b      	ldr	r3, [r1, #4]
 80005a8:	1a1b      	subs	r3, r3, r0
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d3fb      	bcc.n	80005a6 <LcdInit+0x106>
	LcdWrite(LCD_CMD, LCD_DISP_CTRL);
 80005ae:	2108      	movs	r1, #8
 80005b0:	2080      	movs	r0, #128	@ 0x80
 80005b2:	f7ff ff37 	bl	8000424 <LcdWrite>
	uint32_t init_ticks = DWT->CYCCNT;
 80005b6:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <LcdInit+0x198>)
 80005b8:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 80005ba:	4b20      	ldr	r3, [pc, #128]	@ (800063c <LcdInit+0x19c>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <LcdInit+0x1a0>)
 80005c0:	fba3 3202 	umull	r3, r2, r3, r2
 80005c4:	0992      	lsrs	r2, r2, #6
	while ((DWT->CYCCNT - init_ticks) < ms);
 80005c6:	491c      	ldr	r1, [pc, #112]	@ (8000638 <LcdInit+0x198>)
 80005c8:	684b      	ldr	r3, [r1, #4]
 80005ca:	1a1b      	subs	r3, r3, r0
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d3fb      	bcc.n	80005c8 <LcdInit+0x128>
	LcdWrite(LCD_CMD, LCD_CLEAR);
 80005d0:	2101      	movs	r1, #1
 80005d2:	2080      	movs	r0, #128	@ 0x80
 80005d4:	f7ff ff26 	bl	8000424 <LcdWrite>
	uint32_t init_ticks = DWT->CYCCNT;
 80005d8:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <LcdInit+0x198>)
 80005da:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 80005dc:	4b17      	ldr	r3, [pc, #92]	@ (800063c <LcdInit+0x19c>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <LcdInit+0x1a0>)
 80005e2:	fba3 3202 	umull	r3, r2, r3, r2
 80005e6:	0992      	lsrs	r2, r2, #6
	while ((DWT->CYCCNT - init_ticks) < ms);
 80005e8:	4913      	ldr	r1, [pc, #76]	@ (8000638 <LcdInit+0x198>)
 80005ea:	684b      	ldr	r3, [r1, #4]
 80005ec:	1a1b      	subs	r3, r3, r0
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d3fb      	bcc.n	80005ea <LcdInit+0x14a>
	LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
 80005f2:	2106      	movs	r1, #6
 80005f4:	2080      	movs	r0, #128	@ 0x80
 80005f6:	f7ff ff15 	bl	8000424 <LcdWrite>
	uint32_t init_ticks = DWT->CYCCNT;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <LcdInit+0x198>)
 80005fc:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <LcdInit+0x19c>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <LcdInit+0x1a0>)
 8000604:	fba3 3202 	umull	r3, r2, r3, r2
 8000608:	0992      	lsrs	r2, r2, #6
	while ((DWT->CYCCNT - init_ticks) < ms);
 800060a:	490b      	ldr	r1, [pc, #44]	@ (8000638 <LcdInit+0x198>)
 800060c:	684b      	ldr	r3, [r1, #4]
 800060e:	1a1b      	subs	r3, r3, r0
 8000610:	4293      	cmp	r3, r2
 8000612:	d3fb      	bcc.n	800060c <LcdInit+0x16c>
	LcdWrite(LCD_CMD, LCD_DISP_ON);
 8000614:	210c      	movs	r1, #12
 8000616:	2080      	movs	r0, #128	@ 0x80
 8000618:	f7ff ff04 	bl	8000424 <LcdWrite>
	uint32_t init_ticks = DWT->CYCCNT;
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <LcdInit+0x198>)
 800061e:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <LcdInit+0x19c>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <LcdInit+0x1a0>)
 8000626:	fba3 3202 	umull	r3, r2, r3, r2
 800062a:	0992      	lsrs	r2, r2, #6
	while ((DWT->CYCCNT - init_ticks) < ms);
 800062c:	4902      	ldr	r1, [pc, #8]	@ (8000638 <LcdInit+0x198>)
 800062e:	684b      	ldr	r3, [r1, #4]
 8000630:	1a1b      	subs	r3, r3, r0
 8000632:	4293      	cmp	r3, r2
 8000634:	d3fb      	bcc.n	800062e <LcdInit+0x18e>
 8000636:	e74f      	b.n	80004d8 <LcdInit+0x38>
 8000638:	e0001000 	.word	0xe0001000
 800063c:	20000000 	.word	0x20000000
 8000640:	10624dd3 	.word	0x10624dd3

08000644 <LcdPuts>:

void LcdPuts(uint8_t line, char str[]) {
 8000644:	b538      	push	{r3, r4, r5, lr}
 8000646:	460c      	mov	r4, r1
	int i;
	LcdWrite(LCD_CMD, line); // line address
 8000648:	4601      	mov	r1, r0
 800064a:	2080      	movs	r0, #128	@ 0x80
 800064c:	f7ff feea 	bl	8000424 <LcdWrite>
	uint32_t init_ticks = DWT->CYCCNT;
 8000650:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <LcdPuts+0x3c>)
 8000652:	6858      	ldr	r0, [r3, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000654:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <LcdPuts+0x40>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <LcdPuts+0x44>)
 800065a:	fba3 3202 	umull	r3, r2, r3, r2
 800065e:	0992      	lsrs	r2, r2, #6
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000660:	4907      	ldr	r1, [pc, #28]	@ (8000680 <LcdPuts+0x3c>)
 8000662:	684b      	ldr	r3, [r1, #4]
 8000664:	1a1b      	subs	r3, r3, r0
 8000666:	4293      	cmp	r3, r2
 8000668:	d3fb      	bcc.n	8000662 <LcdPuts+0x1e>
	DelayMs(1);
	for(i=0; str[i]!='\0'; i++)
 800066a:	7821      	ldrb	r1, [r4, #0]
 800066c:	b139      	cbz	r1, 800067e <LcdPuts+0x3a>
		LcdWrite(LCD_DATA, str[i]);
 800066e:	2501      	movs	r5, #1
 8000670:	4628      	mov	r0, r5
 8000672:	f7ff fed7 	bl	8000424 <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 8000676:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800067a:	2900      	cmp	r1, #0
 800067c:	d1f8      	bne.n	8000670 <LcdPuts+0x2c>
}
 800067e:	bd38      	pop	{r3, r4, r5, pc}
 8000680:	e0001000 	.word	0xe0001000
 8000684:	20000000 	.word	0x20000000
 8000688:	10624dd3 	.word	0x10624dd3

0800068c <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 800068c:	b410      	push	{r4}
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 800068e:	4a14      	ldr	r2, [pc, #80]	@ (80006e0 <LedInit+0x54>)
 8000690:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <LedInit+0x58>)
 800069a:	681c      	ldr	r4, [r3, #0]
 800069c:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 80006a0:	f10c 0201 	add.w	r2, ip, #1
 80006a4:	2101      	movs	r1, #1
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	ea24 0402 	bic.w	r4, r4, r2
 80006ae:	601c      	str	r4, [r3, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80006b0:	681c      	ldr	r4, [r3, #0]
 80006b2:	fa01 fc0c 	lsl.w	ip, r1, ip
 80006b6:	ea4c 0404 	orr.w	r4, ip, r4
 80006ba:	601c      	str	r4, [r3, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80006bc:	689c      	ldr	r4, [r3, #8]
 80006be:	ea42 020c 	orr.w	r2, r2, ip
 80006c2:	ea24 0402 	bic.w	r4, r4, r2
 80006c6:	609c      	str	r4, [r3, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80006c8:	68dc      	ldr	r4, [r3, #12]
 80006ca:	ea24 0202 	bic.w	r2, r4, r2
 80006ce:	60da      	str	r2, [r3, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	4081      	lsls	r1, r0
 80006d4:	ea22 0201 	bic.w	r2, r2, r1
 80006d8:	605a      	str	r2, [r3, #4]
}
 80006da:	bc10      	pop	{r4}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020c00 	.word	0x40020c00

080006e8 <LedOn>:

void LedOn(uint32_t pin) {
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 80006e8:	4a03      	ldr	r2, [pc, #12]	@ (80006f8 <LedOn+0x10>)
 80006ea:	6951      	ldr	r1, [r2, #20]
 80006ec:	2301      	movs	r3, #1
 80006ee:	4083      	lsls	r3, r0
 80006f0:	430b      	orrs	r3, r1
 80006f2:	6153      	str	r3, [r2, #20]
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40020c00 	.word	0x40020c00

080006fc <LedOff>:

void LedOff(uint32_t pin) {
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 80006fc:	4903      	ldr	r1, [pc, #12]	@ (800070c <LedOff+0x10>)
 80006fe:	694b      	ldr	r3, [r1, #20]
 8000700:	2201      	movs	r2, #1
 8000702:	4082      	lsls	r2, r0
 8000704:	ea23 0302 	bic.w	r3, r3, r2
 8000708:	614b      	str	r3, [r1, #20]
}
 800070a:	4770      	bx	lr
 800070c:	40020c00 	.word	0x40020c00

08000710 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
 extern int volatile cnt;

int main(void)
{
 8000710:	b500      	push	{lr}
 8000712:	b085      	sub	sp, #20
	LcdInit();
     LedInit(LED_ORANGE);
	//TIM7_IRQHandler();
	TimerInit(1000);
    //print count on on lcd
	sprintf(str,"CNT=%d",count);
 8000714:	4e12      	ldr	r6, [pc, #72]	@ (8000760 <main+0x50>)
	uint32_t init_ticks = DWT->CYCCNT;
 8000716:	4c13      	ldr	r4, [pc, #76]	@ (8000764 <main+0x54>)
	uint32_t ticks = (SystemCoreClock / 1000);
 8000718:	4d13      	ldr	r5, [pc, #76]	@ (8000768 <main+0x58>)
	SystemInit();
 800071a:	f000 f873 	bl	8000804 <SystemInit>
	LcdInit();
 800071e:	f7ff febf 	bl	80004a0 <LcdInit>
     LedInit(LED_ORANGE);
 8000722:	200d      	movs	r0, #13
 8000724:	f7ff ffb2 	bl	800068c <LedInit>
	TimerInit(1000);
 8000728:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800072c:	f000 f86e 	bl	800080c <TimerInit>
	sprintf(str,"CNT=%d",count);
 8000730:	6832      	ldr	r2, [r6, #0]
 8000732:	490e      	ldr	r1, [pc, #56]	@ (800076c <main+0x5c>)
 8000734:	4668      	mov	r0, sp
 8000736:	f000 f8e7 	bl	8000908 <siprintf>
	LcdPuts(LCD_LINE1,str);
 800073a:	4669      	mov	r1, sp
 800073c:	2080      	movs	r0, #128	@ 0x80
 800073e:	f7ff ff81 	bl	8000644 <LcdPuts>
	DelayMs(1000);
 8000742:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
	uint32_t init_ticks = DWT->CYCCNT;
 8000746:	6861      	ldr	r1, [r4, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <main+0x60>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	fba5 0303 	umull	r0, r3, r5, r3
 8000750:	099b      	lsrs	r3, r3, #6
	ms *= ticks;
 8000752:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000756:	6863      	ldr	r3, [r4, #4]
 8000758:	1a5b      	subs	r3, r3, r1
 800075a:	4293      	cmp	r3, r2
 800075c:	d3fb      	bcc.n	8000756 <main+0x46>
 800075e:	e7dc      	b.n	800071a <main+0xa>
 8000760:	20000078 	.word	0x20000078
 8000764:	e0001000 	.word	0xe0001000
 8000768:	10624dd3 	.word	0x10624dd3
 800076c:	08001250 	.word	0x08001250
 8000770:	20000000 	.word	0x20000000

08000774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000774:	b508      	push	{r3, lr}
 8000776:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000778:	4a0c      	ldr	r2, [pc, #48]	@ (80007ac <_sbrk+0x38>)
 800077a:	6812      	ldr	r2, [r2, #0]
 800077c:	b152      	cbz	r2, 8000794 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800077e:	4a0b      	ldr	r2, [pc, #44]	@ (80007ac <_sbrk+0x38>)
 8000780:	6810      	ldr	r0, [r2, #0]
 8000782:	4403      	add	r3, r0
 8000784:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <_sbrk+0x3c>)
 8000786:	490b      	ldr	r1, [pc, #44]	@ (80007b4 <_sbrk+0x40>)
 8000788:	1a52      	subs	r2, r2, r1
 800078a:	4293      	cmp	r3, r2
 800078c:	d806      	bhi.n	800079c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800078e:	4a07      	ldr	r2, [pc, #28]	@ (80007ac <_sbrk+0x38>)
 8000790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000792:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8000794:	4a05      	ldr	r2, [pc, #20]	@ (80007ac <_sbrk+0x38>)
 8000796:	4908      	ldr	r1, [pc, #32]	@ (80007b8 <_sbrk+0x44>)
 8000798:	6011      	str	r1, [r2, #0]
 800079a:	e7f0      	b.n	800077e <_sbrk+0xa>
    errno = ENOMEM;
 800079c:	f000 f8d4 	bl	8000948 <__errno>
 80007a0:	230c      	movs	r3, #12
 80007a2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007a8:	e7f3      	b.n	8000792 <_sbrk+0x1e>
 80007aa:	bf00      	nop
 80007ac:	20000070 	.word	0x20000070
 80007b0:	20020000 	.word	0x20020000
 80007b4:	00000400 	.word	0x00000400
 80007b8:	200001c8 	.word	0x200001c8

080007bc <DWT_Init>:


uint32_t DWT_Init(void)
{
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <DWT_Init+0x44>)
 80007be:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 80007c2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80007c6:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80007ca:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 80007ce:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80007d2:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80007d6:	f5a3 435d 	sub.w	r3, r3, #56576	@ 0xdd00
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	f022 0201 	bic.w	r2, r2, #1
 80007e0:	601a      	str	r2, [r3, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	f042 0201 	orr.w	r2, r2, #1
 80007e8:	601a      	str	r2, [r3, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80007ee:	bf00      	nop
    __ASM volatile ("NOP");
 80007f0:	bf00      	nop
    __ASM volatile ("NOP");
 80007f2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80007f4:	6858      	ldr	r0, [r3, #4]
}
 80007f6:	fab0 f080 	clz	r0, r0
 80007fa:	0940      	lsrs	r0, r0, #5
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <SystemInit>:
{
 8000804:	b508      	push	{r3, lr}
  DWT_Init();
 8000806:	f7ff ffd9 	bl	80007bc <DWT_Init>
}
 800080a:	bd08      	pop	{r3, pc}

0800080c <TimerInit>:
#include "led.h"
#include "timer.h"

void TimerInit(uint32_t ms) {
	// enable timer clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 800080c:	4a11      	ldr	r2, [pc, #68]	@ (8000854 <TimerInit+0x48>)
 800080e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000810:	f043 0320 	orr.w	r3, r3, #32
 8000814:	6413      	str	r3, [r2, #64]	@ 0x40
	// set prescalar
	TIM7->PSC = TIM_PR-1;
 8000816:	f5a2 3209 	sub.w	r2, r2, #140288	@ 0x22400
 800081a:	f643 637f 	movw	r3, #15999	@ 0x3e7f
 800081e:	6293      	str	r3, [r2, #40]	@ 0x28
	// set number of clocks to count
	uint16_t cnt = (TCLK / 1000) * ms / TIM_PR;
 8000820:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8000824:	fb00 f303 	mul.w	r3, r0, r3
 8000828:	490b      	ldr	r1, [pc, #44]	@ (8000858 <TimerInit+0x4c>)
 800082a:	fba1 1303 	umull	r1, r3, r1, r3
	TIM7->ARR = cnt - 1;
 800082e:	f3c3 238f 	ubfx	r3, r3, #10, #16
 8000832:	3b01      	subs	r3, #1
 8000834:	62d3      	str	r3, [r2, #44]	@ 0x2c
	// start count from 0
	TIM7->CNT = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	6253      	str	r3, [r2, #36]	@ 0x24
	// enable UI interrupt in timer
	TIM7->DIER |= TIM_DIER_UIE;
 800083a:	68d3      	ldr	r3, [r2, #12]
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	60d3      	str	r3, [r2, #12]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <TimerInit+0x50>)
 8000844:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 8000848:	6059      	str	r1, [r3, #4]
	// enable interrupt in NVIC
	NVIC_EnableIRQ(TIM7_IRQn);
	// start timer counter
	TIM7->CR1 |= TIM_CR1_CEN;
 800084a:	6813      	ldr	r3, [r2, #0]
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6013      	str	r3, [r2, #0]
}
 8000852:	4770      	bx	lr
 8000854:	40023800 	.word	0x40023800
 8000858:	10624dd3 	.word	0x10624dd3
 800085c:	e000e100 	.word	0xe000e100

08000860 <TIM7_IRQHandler>:

extern unsigned int count = 0;
//int count;
// implement timer ISR
void TIM7_IRQHandler(void)
{
 8000860:	b508      	push	{r3, lr}
	static int flag = 0;
	// check if interrupt occurred
	if(TIM7->SR & TIM_SR_UIF) {
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <TIM7_IRQHandler+0x48>)
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	f013 0f01 	tst.w	r3, #1
 800086a:	d011      	beq.n	8000890 <TIM7_IRQHandler+0x30>
		// then clear (ack) the interrupt
		TIM7->SR &= ~TIM_SR_UIF;
 800086c:	4a0e      	ldr	r2, [pc, #56]	@ (80008a8 <TIM7_IRQHandler+0x48>)
 800086e:	6913      	ldr	r3, [r2, #16]
 8000870:	f023 0301 	bic.w	r3, r3, #1
 8000874:	6113      	str	r3, [r2, #16]

		// toggle LED
		if(flag == 0) {
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <TIM7_IRQHandler+0x4c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	b953      	cbnz	r3, 8000892 <TIM7_IRQHandler+0x32>
			LedOn(LED_ORANGE);
 800087c:	200d      	movs	r0, #13
 800087e:	f7ff ff33 	bl	80006e8 <LedOn>
			flag = 1;
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <TIM7_IRQHandler+0x4c>)
 8000884:	2201      	movs	r2, #1
 8000886:	601a      	str	r2, [r3, #0]
			count++;
 8000888:	4a09      	ldr	r2, [pc, #36]	@ (80008b0 <TIM7_IRQHandler+0x50>)
 800088a:	6813      	ldr	r3, [r2, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	6013      	str	r3, [r2, #0]
			flag = 0;
			count++;

		}
	}
}
 8000890:	bd08      	pop	{r3, pc}
			LedOff(LED_ORANGE);
 8000892:	200d      	movs	r0, #13
 8000894:	f7ff ff32 	bl	80006fc <LedOff>
			flag = 0;
 8000898:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <TIM7_IRQHandler+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
			count++;
 800089e:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <TIM7_IRQHandler+0x50>)
 80008a0:	6813      	ldr	r3, [r2, #0]
 80008a2:	3301      	adds	r3, #1
 80008a4:	6013      	str	r3, [r2, #0]
}
 80008a6:	e7f3      	b.n	8000890 <TIM7_IRQHandler+0x30>
 80008a8:	40001400 	.word	0x40001400
 80008ac:	20000074 	.word	0x20000074
 80008b0:	20000078 	.word	0x20000078

080008b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b4:	480d      	ldr	r0, [pc, #52]	@ (80008ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b8:	f7ff ffa4 	bl	8000804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008be:	490d      	ldr	r1, [pc, #52]	@ (80008f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c0:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <LoopForever+0xe>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000900 <LoopForever+0x16>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008e2:	f000 f837 	bl	8000954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff ff13 	bl	8000710 <main>

080008ea <LoopForever>:

LoopForever:
  b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   r0, =_estack
 80008ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80008f8:	0800129c 	.word	0x0800129c
  ldr r2, =_sbss
 80008fc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000900:	200001c4 	.word	0x200001c4

08000904 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC_IRQHandler>
	...

08000908 <siprintf>:
 8000908:	b40e      	push	{r1, r2, r3}
 800090a:	b500      	push	{lr}
 800090c:	b09c      	sub	sp, #112	@ 0x70
 800090e:	ab1d      	add	r3, sp, #116	@ 0x74
 8000910:	9002      	str	r0, [sp, #8]
 8000912:	9006      	str	r0, [sp, #24]
 8000914:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000918:	4809      	ldr	r0, [pc, #36]	@ (8000940 <siprintf+0x38>)
 800091a:	9107      	str	r1, [sp, #28]
 800091c:	9104      	str	r1, [sp, #16]
 800091e:	4909      	ldr	r1, [pc, #36]	@ (8000944 <siprintf+0x3c>)
 8000920:	f853 2b04 	ldr.w	r2, [r3], #4
 8000924:	9105      	str	r1, [sp, #20]
 8000926:	6800      	ldr	r0, [r0, #0]
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	a902      	add	r1, sp, #8
 800092c:	f000 f98c 	bl	8000c48 <_svfiprintf_r>
 8000930:	9b02      	ldr	r3, [sp, #8]
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	b01c      	add	sp, #112	@ 0x70
 8000938:	f85d eb04 	ldr.w	lr, [sp], #4
 800093c:	b003      	add	sp, #12
 800093e:	4770      	bx	lr
 8000940:	20000004 	.word	0x20000004
 8000944:	ffff0208 	.word	0xffff0208

08000948 <__errno>:
 8000948:	4b01      	ldr	r3, [pc, #4]	@ (8000950 <__errno+0x8>)
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000004 	.word	0x20000004

08000954 <__libc_init_array>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	4d0d      	ldr	r5, [pc, #52]	@ (800098c <__libc_init_array+0x38>)
 8000958:	4c0d      	ldr	r4, [pc, #52]	@ (8000990 <__libc_init_array+0x3c>)
 800095a:	1b64      	subs	r4, r4, r5
 800095c:	10a4      	asrs	r4, r4, #2
 800095e:	2600      	movs	r6, #0
 8000960:	42a6      	cmp	r6, r4
 8000962:	d109      	bne.n	8000978 <__libc_init_array+0x24>
 8000964:	4d0b      	ldr	r5, [pc, #44]	@ (8000994 <__libc_init_array+0x40>)
 8000966:	4c0c      	ldr	r4, [pc, #48]	@ (8000998 <__libc_init_array+0x44>)
 8000968:	f000 fc66 	bl	8001238 <_init>
 800096c:	1b64      	subs	r4, r4, r5
 800096e:	10a4      	asrs	r4, r4, #2
 8000970:	2600      	movs	r6, #0
 8000972:	42a6      	cmp	r6, r4
 8000974:	d105      	bne.n	8000982 <__libc_init_array+0x2e>
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f855 3b04 	ldr.w	r3, [r5], #4
 800097c:	4798      	blx	r3
 800097e:	3601      	adds	r6, #1
 8000980:	e7ee      	b.n	8000960 <__libc_init_array+0xc>
 8000982:	f855 3b04 	ldr.w	r3, [r5], #4
 8000986:	4798      	blx	r3
 8000988:	3601      	adds	r6, #1
 800098a:	e7f2      	b.n	8000972 <__libc_init_array+0x1e>
 800098c:	08001294 	.word	0x08001294
 8000990:	08001294 	.word	0x08001294
 8000994:	08001294 	.word	0x08001294
 8000998:	08001298 	.word	0x08001298

0800099c <__retarget_lock_acquire_recursive>:
 800099c:	4770      	bx	lr

0800099e <__retarget_lock_release_recursive>:
 800099e:	4770      	bx	lr

080009a0 <_free_r>:
 80009a0:	b538      	push	{r3, r4, r5, lr}
 80009a2:	4605      	mov	r5, r0
 80009a4:	2900      	cmp	r1, #0
 80009a6:	d041      	beq.n	8000a2c <_free_r+0x8c>
 80009a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009ac:	1f0c      	subs	r4, r1, #4
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	bfb8      	it	lt
 80009b2:	18e4      	addlt	r4, r4, r3
 80009b4:	f000 f8e0 	bl	8000b78 <__malloc_lock>
 80009b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a30 <_free_r+0x90>)
 80009ba:	6813      	ldr	r3, [r2, #0]
 80009bc:	b933      	cbnz	r3, 80009cc <_free_r+0x2c>
 80009be:	6063      	str	r3, [r4, #4]
 80009c0:	6014      	str	r4, [r2, #0]
 80009c2:	4628      	mov	r0, r5
 80009c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009c8:	f000 b8dc 	b.w	8000b84 <__malloc_unlock>
 80009cc:	42a3      	cmp	r3, r4
 80009ce:	d908      	bls.n	80009e2 <_free_r+0x42>
 80009d0:	6820      	ldr	r0, [r4, #0]
 80009d2:	1821      	adds	r1, r4, r0
 80009d4:	428b      	cmp	r3, r1
 80009d6:	bf01      	itttt	eq
 80009d8:	6819      	ldreq	r1, [r3, #0]
 80009da:	685b      	ldreq	r3, [r3, #4]
 80009dc:	1809      	addeq	r1, r1, r0
 80009de:	6021      	streq	r1, [r4, #0]
 80009e0:	e7ed      	b.n	80009be <_free_r+0x1e>
 80009e2:	461a      	mov	r2, r3
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	b10b      	cbz	r3, 80009ec <_free_r+0x4c>
 80009e8:	42a3      	cmp	r3, r4
 80009ea:	d9fa      	bls.n	80009e2 <_free_r+0x42>
 80009ec:	6811      	ldr	r1, [r2, #0]
 80009ee:	1850      	adds	r0, r2, r1
 80009f0:	42a0      	cmp	r0, r4
 80009f2:	d10b      	bne.n	8000a0c <_free_r+0x6c>
 80009f4:	6820      	ldr	r0, [r4, #0]
 80009f6:	4401      	add	r1, r0
 80009f8:	1850      	adds	r0, r2, r1
 80009fa:	4283      	cmp	r3, r0
 80009fc:	6011      	str	r1, [r2, #0]
 80009fe:	d1e0      	bne.n	80009c2 <_free_r+0x22>
 8000a00:	6818      	ldr	r0, [r3, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	6053      	str	r3, [r2, #4]
 8000a06:	4408      	add	r0, r1
 8000a08:	6010      	str	r0, [r2, #0]
 8000a0a:	e7da      	b.n	80009c2 <_free_r+0x22>
 8000a0c:	d902      	bls.n	8000a14 <_free_r+0x74>
 8000a0e:	230c      	movs	r3, #12
 8000a10:	602b      	str	r3, [r5, #0]
 8000a12:	e7d6      	b.n	80009c2 <_free_r+0x22>
 8000a14:	6820      	ldr	r0, [r4, #0]
 8000a16:	1821      	adds	r1, r4, r0
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	bf04      	itt	eq
 8000a1c:	6819      	ldreq	r1, [r3, #0]
 8000a1e:	685b      	ldreq	r3, [r3, #4]
 8000a20:	6063      	str	r3, [r4, #4]
 8000a22:	bf04      	itt	eq
 8000a24:	1809      	addeq	r1, r1, r0
 8000a26:	6021      	streq	r1, [r4, #0]
 8000a28:	6054      	str	r4, [r2, #4]
 8000a2a:	e7ca      	b.n	80009c2 <_free_r+0x22>
 8000a2c:	bd38      	pop	{r3, r4, r5, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001c0 	.word	0x200001c0

08000a34 <sbrk_aligned>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	4e0f      	ldr	r6, [pc, #60]	@ (8000a74 <sbrk_aligned+0x40>)
 8000a38:	460c      	mov	r4, r1
 8000a3a:	6831      	ldr	r1, [r6, #0]
 8000a3c:	4605      	mov	r5, r0
 8000a3e:	b911      	cbnz	r1, 8000a46 <sbrk_aligned+0x12>
 8000a40:	f000 fba6 	bl	8001190 <_sbrk_r>
 8000a44:	6030      	str	r0, [r6, #0]
 8000a46:	4621      	mov	r1, r4
 8000a48:	4628      	mov	r0, r5
 8000a4a:	f000 fba1 	bl	8001190 <_sbrk_r>
 8000a4e:	1c43      	adds	r3, r0, #1
 8000a50:	d103      	bne.n	8000a5a <sbrk_aligned+0x26>
 8000a52:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000a56:	4620      	mov	r0, r4
 8000a58:	bd70      	pop	{r4, r5, r6, pc}
 8000a5a:	1cc4      	adds	r4, r0, #3
 8000a5c:	f024 0403 	bic.w	r4, r4, #3
 8000a60:	42a0      	cmp	r0, r4
 8000a62:	d0f8      	beq.n	8000a56 <sbrk_aligned+0x22>
 8000a64:	1a21      	subs	r1, r4, r0
 8000a66:	4628      	mov	r0, r5
 8000a68:	f000 fb92 	bl	8001190 <_sbrk_r>
 8000a6c:	3001      	adds	r0, #1
 8000a6e:	d1f2      	bne.n	8000a56 <sbrk_aligned+0x22>
 8000a70:	e7ef      	b.n	8000a52 <sbrk_aligned+0x1e>
 8000a72:	bf00      	nop
 8000a74:	200001bc 	.word	0x200001bc

08000a78 <_malloc_r>:
 8000a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a7c:	1ccd      	adds	r5, r1, #3
 8000a7e:	f025 0503 	bic.w	r5, r5, #3
 8000a82:	3508      	adds	r5, #8
 8000a84:	2d0c      	cmp	r5, #12
 8000a86:	bf38      	it	cc
 8000a88:	250c      	movcc	r5, #12
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	4606      	mov	r6, r0
 8000a8e:	db01      	blt.n	8000a94 <_malloc_r+0x1c>
 8000a90:	42a9      	cmp	r1, r5
 8000a92:	d904      	bls.n	8000a9e <_malloc_r+0x26>
 8000a94:	230c      	movs	r3, #12
 8000a96:	6033      	str	r3, [r6, #0]
 8000a98:	2000      	movs	r0, #0
 8000a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b74 <_malloc_r+0xfc>
 8000aa2:	f000 f869 	bl	8000b78 <__malloc_lock>
 8000aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8000aaa:	461c      	mov	r4, r3
 8000aac:	bb44      	cbnz	r4, 8000b00 <_malloc_r+0x88>
 8000aae:	4629      	mov	r1, r5
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	f7ff ffbf 	bl	8000a34 <sbrk_aligned>
 8000ab6:	1c43      	adds	r3, r0, #1
 8000ab8:	4604      	mov	r4, r0
 8000aba:	d158      	bne.n	8000b6e <_malloc_r+0xf6>
 8000abc:	f8d8 4000 	ldr.w	r4, [r8]
 8000ac0:	4627      	mov	r7, r4
 8000ac2:	2f00      	cmp	r7, #0
 8000ac4:	d143      	bne.n	8000b4e <_malloc_r+0xd6>
 8000ac6:	2c00      	cmp	r4, #0
 8000ac8:	d04b      	beq.n	8000b62 <_malloc_r+0xea>
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	4639      	mov	r1, r7
 8000ace:	4630      	mov	r0, r6
 8000ad0:	eb04 0903 	add.w	r9, r4, r3
 8000ad4:	f000 fb5c 	bl	8001190 <_sbrk_r>
 8000ad8:	4581      	cmp	r9, r0
 8000ada:	d142      	bne.n	8000b62 <_malloc_r+0xea>
 8000adc:	6821      	ldr	r1, [r4, #0]
 8000ade:	1a6d      	subs	r5, r5, r1
 8000ae0:	4629      	mov	r1, r5
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	f7ff ffa6 	bl	8000a34 <sbrk_aligned>
 8000ae8:	3001      	adds	r0, #1
 8000aea:	d03a      	beq.n	8000b62 <_malloc_r+0xea>
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	442b      	add	r3, r5
 8000af0:	6023      	str	r3, [r4, #0]
 8000af2:	f8d8 3000 	ldr.w	r3, [r8]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	bb62      	cbnz	r2, 8000b54 <_malloc_r+0xdc>
 8000afa:	f8c8 7000 	str.w	r7, [r8]
 8000afe:	e00f      	b.n	8000b20 <_malloc_r+0xa8>
 8000b00:	6822      	ldr	r2, [r4, #0]
 8000b02:	1b52      	subs	r2, r2, r5
 8000b04:	d420      	bmi.n	8000b48 <_malloc_r+0xd0>
 8000b06:	2a0b      	cmp	r2, #11
 8000b08:	d917      	bls.n	8000b3a <_malloc_r+0xc2>
 8000b0a:	1961      	adds	r1, r4, r5
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	6025      	str	r5, [r4, #0]
 8000b10:	bf18      	it	ne
 8000b12:	6059      	strne	r1, [r3, #4]
 8000b14:	6863      	ldr	r3, [r4, #4]
 8000b16:	bf08      	it	eq
 8000b18:	f8c8 1000 	streq.w	r1, [r8]
 8000b1c:	5162      	str	r2, [r4, r5]
 8000b1e:	604b      	str	r3, [r1, #4]
 8000b20:	4630      	mov	r0, r6
 8000b22:	f000 f82f 	bl	8000b84 <__malloc_unlock>
 8000b26:	f104 000b 	add.w	r0, r4, #11
 8000b2a:	1d23      	adds	r3, r4, #4
 8000b2c:	f020 0007 	bic.w	r0, r0, #7
 8000b30:	1ac2      	subs	r2, r0, r3
 8000b32:	bf1c      	itt	ne
 8000b34:	1a1b      	subne	r3, r3, r0
 8000b36:	50a3      	strne	r3, [r4, r2]
 8000b38:	e7af      	b.n	8000a9a <_malloc_r+0x22>
 8000b3a:	6862      	ldr	r2, [r4, #4]
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	bf0c      	ite	eq
 8000b40:	f8c8 2000 	streq.w	r2, [r8]
 8000b44:	605a      	strne	r2, [r3, #4]
 8000b46:	e7eb      	b.n	8000b20 <_malloc_r+0xa8>
 8000b48:	4623      	mov	r3, r4
 8000b4a:	6864      	ldr	r4, [r4, #4]
 8000b4c:	e7ae      	b.n	8000aac <_malloc_r+0x34>
 8000b4e:	463c      	mov	r4, r7
 8000b50:	687f      	ldr	r7, [r7, #4]
 8000b52:	e7b6      	b.n	8000ac2 <_malloc_r+0x4a>
 8000b54:	461a      	mov	r2, r3
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	42a3      	cmp	r3, r4
 8000b5a:	d1fb      	bne.n	8000b54 <_malloc_r+0xdc>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	6053      	str	r3, [r2, #4]
 8000b60:	e7de      	b.n	8000b20 <_malloc_r+0xa8>
 8000b62:	230c      	movs	r3, #12
 8000b64:	6033      	str	r3, [r6, #0]
 8000b66:	4630      	mov	r0, r6
 8000b68:	f000 f80c 	bl	8000b84 <__malloc_unlock>
 8000b6c:	e794      	b.n	8000a98 <_malloc_r+0x20>
 8000b6e:	6005      	str	r5, [r0, #0]
 8000b70:	e7d6      	b.n	8000b20 <_malloc_r+0xa8>
 8000b72:	bf00      	nop
 8000b74:	200001c0 	.word	0x200001c0

08000b78 <__malloc_lock>:
 8000b78:	4801      	ldr	r0, [pc, #4]	@ (8000b80 <__malloc_lock+0x8>)
 8000b7a:	f7ff bf0f 	b.w	800099c <__retarget_lock_acquire_recursive>
 8000b7e:	bf00      	nop
 8000b80:	200001b8 	.word	0x200001b8

08000b84 <__malloc_unlock>:
 8000b84:	4801      	ldr	r0, [pc, #4]	@ (8000b8c <__malloc_unlock+0x8>)
 8000b86:	f7ff bf0a 	b.w	800099e <__retarget_lock_release_recursive>
 8000b8a:	bf00      	nop
 8000b8c:	200001b8 	.word	0x200001b8

08000b90 <__ssputs_r>:
 8000b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b94:	688e      	ldr	r6, [r1, #8]
 8000b96:	461f      	mov	r7, r3
 8000b98:	42be      	cmp	r6, r7
 8000b9a:	680b      	ldr	r3, [r1, #0]
 8000b9c:	4682      	mov	sl, r0
 8000b9e:	460c      	mov	r4, r1
 8000ba0:	4690      	mov	r8, r2
 8000ba2:	d82d      	bhi.n	8000c00 <__ssputs_r+0x70>
 8000ba4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ba8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000bac:	d026      	beq.n	8000bfc <__ssputs_r+0x6c>
 8000bae:	6965      	ldr	r5, [r4, #20]
 8000bb0:	6909      	ldr	r1, [r1, #16]
 8000bb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000bb6:	eba3 0901 	sub.w	r9, r3, r1
 8000bba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000bbe:	1c7b      	adds	r3, r7, #1
 8000bc0:	444b      	add	r3, r9
 8000bc2:	106d      	asrs	r5, r5, #1
 8000bc4:	429d      	cmp	r5, r3
 8000bc6:	bf38      	it	cc
 8000bc8:	461d      	movcc	r5, r3
 8000bca:	0553      	lsls	r3, r2, #21
 8000bcc:	d527      	bpl.n	8000c1e <__ssputs_r+0x8e>
 8000bce:	4629      	mov	r1, r5
 8000bd0:	f7ff ff52 	bl	8000a78 <_malloc_r>
 8000bd4:	4606      	mov	r6, r0
 8000bd6:	b360      	cbz	r0, 8000c32 <__ssputs_r+0xa2>
 8000bd8:	6921      	ldr	r1, [r4, #16]
 8000bda:	464a      	mov	r2, r9
 8000bdc:	f000 fae8 	bl	80011b0 <memcpy>
 8000be0:	89a3      	ldrh	r3, [r4, #12]
 8000be2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bea:	81a3      	strh	r3, [r4, #12]
 8000bec:	6126      	str	r6, [r4, #16]
 8000bee:	6165      	str	r5, [r4, #20]
 8000bf0:	444e      	add	r6, r9
 8000bf2:	eba5 0509 	sub.w	r5, r5, r9
 8000bf6:	6026      	str	r6, [r4, #0]
 8000bf8:	60a5      	str	r5, [r4, #8]
 8000bfa:	463e      	mov	r6, r7
 8000bfc:	42be      	cmp	r6, r7
 8000bfe:	d900      	bls.n	8000c02 <__ssputs_r+0x72>
 8000c00:	463e      	mov	r6, r7
 8000c02:	6820      	ldr	r0, [r4, #0]
 8000c04:	4632      	mov	r2, r6
 8000c06:	4641      	mov	r1, r8
 8000c08:	f000 faa8 	bl	800115c <memmove>
 8000c0c:	68a3      	ldr	r3, [r4, #8]
 8000c0e:	1b9b      	subs	r3, r3, r6
 8000c10:	60a3      	str	r3, [r4, #8]
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	4433      	add	r3, r6
 8000c16:	6023      	str	r3, [r4, #0]
 8000c18:	2000      	movs	r0, #0
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	462a      	mov	r2, r5
 8000c20:	f000 fad4 	bl	80011cc <_realloc_r>
 8000c24:	4606      	mov	r6, r0
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d1e0      	bne.n	8000bec <__ssputs_r+0x5c>
 8000c2a:	6921      	ldr	r1, [r4, #16]
 8000c2c:	4650      	mov	r0, sl
 8000c2e:	f7ff feb7 	bl	80009a0 <_free_r>
 8000c32:	230c      	movs	r3, #12
 8000c34:	f8ca 3000 	str.w	r3, [sl]
 8000c38:	89a3      	ldrh	r3, [r4, #12]
 8000c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c3e:	81a3      	strh	r3, [r4, #12]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c44:	e7e9      	b.n	8000c1a <__ssputs_r+0x8a>
	...

08000c48 <_svfiprintf_r>:
 8000c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c4c:	4698      	mov	r8, r3
 8000c4e:	898b      	ldrh	r3, [r1, #12]
 8000c50:	061b      	lsls	r3, r3, #24
 8000c52:	b09d      	sub	sp, #116	@ 0x74
 8000c54:	4607      	mov	r7, r0
 8000c56:	460d      	mov	r5, r1
 8000c58:	4614      	mov	r4, r2
 8000c5a:	d510      	bpl.n	8000c7e <_svfiprintf_r+0x36>
 8000c5c:	690b      	ldr	r3, [r1, #16]
 8000c5e:	b973      	cbnz	r3, 8000c7e <_svfiprintf_r+0x36>
 8000c60:	2140      	movs	r1, #64	@ 0x40
 8000c62:	f7ff ff09 	bl	8000a78 <_malloc_r>
 8000c66:	6028      	str	r0, [r5, #0]
 8000c68:	6128      	str	r0, [r5, #16]
 8000c6a:	b930      	cbnz	r0, 8000c7a <_svfiprintf_r+0x32>
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c74:	b01d      	add	sp, #116	@ 0x74
 8000c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c7a:	2340      	movs	r3, #64	@ 0x40
 8000c7c:	616b      	str	r3, [r5, #20]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c82:	2320      	movs	r3, #32
 8000c84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c8c:	2330      	movs	r3, #48	@ 0x30
 8000c8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000e2c <_svfiprintf_r+0x1e4>
 8000c92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c96:	f04f 0901 	mov.w	r9, #1
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	469a      	mov	sl, r3
 8000c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ca2:	b10a      	cbz	r2, 8000ca8 <_svfiprintf_r+0x60>
 8000ca4:	2a25      	cmp	r2, #37	@ 0x25
 8000ca6:	d1f9      	bne.n	8000c9c <_svfiprintf_r+0x54>
 8000ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8000cac:	d00b      	beq.n	8000cc6 <_svfiprintf_r+0x7e>
 8000cae:	465b      	mov	r3, fp
 8000cb0:	4622      	mov	r2, r4
 8000cb2:	4629      	mov	r1, r5
 8000cb4:	4638      	mov	r0, r7
 8000cb6:	f7ff ff6b 	bl	8000b90 <__ssputs_r>
 8000cba:	3001      	adds	r0, #1
 8000cbc:	f000 80a7 	beq.w	8000e0e <_svfiprintf_r+0x1c6>
 8000cc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000cc2:	445a      	add	r2, fp
 8000cc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 809f 	beq.w	8000e0e <_svfiprintf_r+0x1c6>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cda:	f10a 0a01 	add.w	sl, sl, #1
 8000cde:	9304      	str	r3, [sp, #16]
 8000ce0:	9307      	str	r3, [sp, #28]
 8000ce2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ce6:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ce8:	4654      	mov	r4, sl
 8000cea:	2205      	movs	r2, #5
 8000cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cf0:	484e      	ldr	r0, [pc, #312]	@ (8000e2c <_svfiprintf_r+0x1e4>)
 8000cf2:	f7ff fa6d 	bl	80001d0 <memchr>
 8000cf6:	9a04      	ldr	r2, [sp, #16]
 8000cf8:	b9d8      	cbnz	r0, 8000d32 <_svfiprintf_r+0xea>
 8000cfa:	06d0      	lsls	r0, r2, #27
 8000cfc:	bf44      	itt	mi
 8000cfe:	2320      	movmi	r3, #32
 8000d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d04:	0711      	lsls	r1, r2, #28
 8000d06:	bf44      	itt	mi
 8000d08:	232b      	movmi	r3, #43	@ 0x2b
 8000d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8000d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d14:	d015      	beq.n	8000d42 <_svfiprintf_r+0xfa>
 8000d16:	9a07      	ldr	r2, [sp, #28]
 8000d18:	4654      	mov	r4, sl
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f04f 0c0a 	mov.w	ip, #10
 8000d20:	4621      	mov	r1, r4
 8000d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d26:	3b30      	subs	r3, #48	@ 0x30
 8000d28:	2b09      	cmp	r3, #9
 8000d2a:	d94b      	bls.n	8000dc4 <_svfiprintf_r+0x17c>
 8000d2c:	b1b0      	cbz	r0, 8000d5c <_svfiprintf_r+0x114>
 8000d2e:	9207      	str	r2, [sp, #28]
 8000d30:	e014      	b.n	8000d5c <_svfiprintf_r+0x114>
 8000d32:	eba0 0308 	sub.w	r3, r0, r8
 8000d36:	fa09 f303 	lsl.w	r3, r9, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	9304      	str	r3, [sp, #16]
 8000d3e:	46a2      	mov	sl, r4
 8000d40:	e7d2      	b.n	8000ce8 <_svfiprintf_r+0xa0>
 8000d42:	9b03      	ldr	r3, [sp, #12]
 8000d44:	1d19      	adds	r1, r3, #4
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	9103      	str	r1, [sp, #12]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	bfbb      	ittet	lt
 8000d4e:	425b      	neglt	r3, r3
 8000d50:	f042 0202 	orrlt.w	r2, r2, #2
 8000d54:	9307      	strge	r3, [sp, #28]
 8000d56:	9307      	strlt	r3, [sp, #28]
 8000d58:	bfb8      	it	lt
 8000d5a:	9204      	strlt	r2, [sp, #16]
 8000d5c:	7823      	ldrb	r3, [r4, #0]
 8000d5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d60:	d10a      	bne.n	8000d78 <_svfiprintf_r+0x130>
 8000d62:	7863      	ldrb	r3, [r4, #1]
 8000d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d66:	d132      	bne.n	8000dce <_svfiprintf_r+0x186>
 8000d68:	9b03      	ldr	r3, [sp, #12]
 8000d6a:	1d1a      	adds	r2, r3, #4
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	9203      	str	r2, [sp, #12]
 8000d70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d74:	3402      	adds	r4, #2
 8000d76:	9305      	str	r3, [sp, #20]
 8000d78:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000e30 <_svfiprintf_r+0x1e8>
 8000d7c:	7821      	ldrb	r1, [r4, #0]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	4650      	mov	r0, sl
 8000d82:	f7ff fa25 	bl	80001d0 <memchr>
 8000d86:	b138      	cbz	r0, 8000d98 <_svfiprintf_r+0x150>
 8000d88:	9b04      	ldr	r3, [sp, #16]
 8000d8a:	eba0 000a 	sub.w	r0, r0, sl
 8000d8e:	2240      	movs	r2, #64	@ 0x40
 8000d90:	4082      	lsls	r2, r0
 8000d92:	4313      	orrs	r3, r2
 8000d94:	3401      	adds	r4, #1
 8000d96:	9304      	str	r3, [sp, #16]
 8000d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d9c:	4825      	ldr	r0, [pc, #148]	@ (8000e34 <_svfiprintf_r+0x1ec>)
 8000d9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000da2:	2206      	movs	r2, #6
 8000da4:	f7ff fa14 	bl	80001d0 <memchr>
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d036      	beq.n	8000e1a <_svfiprintf_r+0x1d2>
 8000dac:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <_svfiprintf_r+0x1f0>)
 8000dae:	bb1b      	cbnz	r3, 8000df8 <_svfiprintf_r+0x1b0>
 8000db0:	9b03      	ldr	r3, [sp, #12]
 8000db2:	3307      	adds	r3, #7
 8000db4:	f023 0307 	bic.w	r3, r3, #7
 8000db8:	3308      	adds	r3, #8
 8000dba:	9303      	str	r3, [sp, #12]
 8000dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000dbe:	4433      	add	r3, r6
 8000dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dc2:	e76a      	b.n	8000c9a <_svfiprintf_r+0x52>
 8000dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dc8:	460c      	mov	r4, r1
 8000dca:	2001      	movs	r0, #1
 8000dcc:	e7a8      	b.n	8000d20 <_svfiprintf_r+0xd8>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	3401      	adds	r4, #1
 8000dd2:	9305      	str	r3, [sp, #20]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f04f 0c0a 	mov.w	ip, #10
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000de0:	3a30      	subs	r2, #48	@ 0x30
 8000de2:	2a09      	cmp	r2, #9
 8000de4:	d903      	bls.n	8000dee <_svfiprintf_r+0x1a6>
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0c6      	beq.n	8000d78 <_svfiprintf_r+0x130>
 8000dea:	9105      	str	r1, [sp, #20]
 8000dec:	e7c4      	b.n	8000d78 <_svfiprintf_r+0x130>
 8000dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8000df2:	4604      	mov	r4, r0
 8000df4:	2301      	movs	r3, #1
 8000df6:	e7f0      	b.n	8000dda <_svfiprintf_r+0x192>
 8000df8:	ab03      	add	r3, sp, #12
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	462a      	mov	r2, r5
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <_svfiprintf_r+0x1f4>)
 8000e00:	a904      	add	r1, sp, #16
 8000e02:	4638      	mov	r0, r7
 8000e04:	f3af 8000 	nop.w
 8000e08:	1c42      	adds	r2, r0, #1
 8000e0a:	4606      	mov	r6, r0
 8000e0c:	d1d6      	bne.n	8000dbc <_svfiprintf_r+0x174>
 8000e0e:	89ab      	ldrh	r3, [r5, #12]
 8000e10:	065b      	lsls	r3, r3, #25
 8000e12:	f53f af2d 	bmi.w	8000c70 <_svfiprintf_r+0x28>
 8000e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e18:	e72c      	b.n	8000c74 <_svfiprintf_r+0x2c>
 8000e1a:	ab03      	add	r3, sp, #12
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	462a      	mov	r2, r5
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <_svfiprintf_r+0x1f4>)
 8000e22:	a904      	add	r1, sp, #16
 8000e24:	4638      	mov	r0, r7
 8000e26:	f000 f879 	bl	8000f1c <_printf_i>
 8000e2a:	e7ed      	b.n	8000e08 <_svfiprintf_r+0x1c0>
 8000e2c:	08001257 	.word	0x08001257
 8000e30:	0800125d 	.word	0x0800125d
 8000e34:	08001261 	.word	0x08001261
 8000e38:	00000000 	.word	0x00000000
 8000e3c:	08000b91 	.word	0x08000b91

08000e40 <_printf_common>:
 8000e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e44:	4616      	mov	r6, r2
 8000e46:	4698      	mov	r8, r3
 8000e48:	688a      	ldr	r2, [r1, #8]
 8000e4a:	690b      	ldr	r3, [r1, #16]
 8000e4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e50:	4293      	cmp	r3, r2
 8000e52:	bfb8      	it	lt
 8000e54:	4613      	movlt	r3, r2
 8000e56:	6033      	str	r3, [r6, #0]
 8000e58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	460c      	mov	r4, r1
 8000e60:	b10a      	cbz	r2, 8000e66 <_printf_common+0x26>
 8000e62:	3301      	adds	r3, #1
 8000e64:	6033      	str	r3, [r6, #0]
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	0699      	lsls	r1, r3, #26
 8000e6a:	bf42      	ittt	mi
 8000e6c:	6833      	ldrmi	r3, [r6, #0]
 8000e6e:	3302      	addmi	r3, #2
 8000e70:	6033      	strmi	r3, [r6, #0]
 8000e72:	6825      	ldr	r5, [r4, #0]
 8000e74:	f015 0506 	ands.w	r5, r5, #6
 8000e78:	d106      	bne.n	8000e88 <_printf_common+0x48>
 8000e7a:	f104 0a19 	add.w	sl, r4, #25
 8000e7e:	68e3      	ldr	r3, [r4, #12]
 8000e80:	6832      	ldr	r2, [r6, #0]
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	42ab      	cmp	r3, r5
 8000e86:	dc26      	bgt.n	8000ed6 <_printf_common+0x96>
 8000e88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e8c:	6822      	ldr	r2, [r4, #0]
 8000e8e:	3b00      	subs	r3, #0
 8000e90:	bf18      	it	ne
 8000e92:	2301      	movne	r3, #1
 8000e94:	0692      	lsls	r2, r2, #26
 8000e96:	d42b      	bmi.n	8000ef0 <_printf_common+0xb0>
 8000e98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e9c:	4641      	mov	r1, r8
 8000e9e:	4638      	mov	r0, r7
 8000ea0:	47c8      	blx	r9
 8000ea2:	3001      	adds	r0, #1
 8000ea4:	d01e      	beq.n	8000ee4 <_printf_common+0xa4>
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	6922      	ldr	r2, [r4, #16]
 8000eaa:	f003 0306 	and.w	r3, r3, #6
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf02      	ittt	eq
 8000eb2:	68e5      	ldreq	r5, [r4, #12]
 8000eb4:	6833      	ldreq	r3, [r6, #0]
 8000eb6:	1aed      	subeq	r5, r5, r3
 8000eb8:	68a3      	ldr	r3, [r4, #8]
 8000eba:	bf0c      	ite	eq
 8000ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ec0:	2500      	movne	r5, #0
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	bfc4      	itt	gt
 8000ec6:	1a9b      	subgt	r3, r3, r2
 8000ec8:	18ed      	addgt	r5, r5, r3
 8000eca:	2600      	movs	r6, #0
 8000ecc:	341a      	adds	r4, #26
 8000ece:	42b5      	cmp	r5, r6
 8000ed0:	d11a      	bne.n	8000f08 <_printf_common+0xc8>
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	e008      	b.n	8000ee8 <_printf_common+0xa8>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	4652      	mov	r2, sl
 8000eda:	4641      	mov	r1, r8
 8000edc:	4638      	mov	r0, r7
 8000ede:	47c8      	blx	r9
 8000ee0:	3001      	adds	r0, #1
 8000ee2:	d103      	bne.n	8000eec <_printf_common+0xac>
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eec:	3501      	adds	r5, #1
 8000eee:	e7c6      	b.n	8000e7e <_printf_common+0x3e>
 8000ef0:	18e1      	adds	r1, r4, r3
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	2030      	movs	r0, #48	@ 0x30
 8000ef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000efa:	4422      	add	r2, r4
 8000efc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f04:	3302      	adds	r3, #2
 8000f06:	e7c7      	b.n	8000e98 <_printf_common+0x58>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	4641      	mov	r1, r8
 8000f0e:	4638      	mov	r0, r7
 8000f10:	47c8      	blx	r9
 8000f12:	3001      	adds	r0, #1
 8000f14:	d0e6      	beq.n	8000ee4 <_printf_common+0xa4>
 8000f16:	3601      	adds	r6, #1
 8000f18:	e7d9      	b.n	8000ece <_printf_common+0x8e>
	...

08000f1c <_printf_i>:
 8000f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f20:	7e0f      	ldrb	r7, [r1, #24]
 8000f22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f24:	2f78      	cmp	r7, #120	@ 0x78
 8000f26:	4691      	mov	r9, r2
 8000f28:	4680      	mov	r8, r0
 8000f2a:	460c      	mov	r4, r1
 8000f2c:	469a      	mov	sl, r3
 8000f2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f32:	d807      	bhi.n	8000f44 <_printf_i+0x28>
 8000f34:	2f62      	cmp	r7, #98	@ 0x62
 8000f36:	d80a      	bhi.n	8000f4e <_printf_i+0x32>
 8000f38:	2f00      	cmp	r7, #0
 8000f3a:	f000 80d2 	beq.w	80010e2 <_printf_i+0x1c6>
 8000f3e:	2f58      	cmp	r7, #88	@ 0x58
 8000f40:	f000 80b9 	beq.w	80010b6 <_printf_i+0x19a>
 8000f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f4c:	e03a      	b.n	8000fc4 <_printf_i+0xa8>
 8000f4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f52:	2b15      	cmp	r3, #21
 8000f54:	d8f6      	bhi.n	8000f44 <_printf_i+0x28>
 8000f56:	a101      	add	r1, pc, #4	@ (adr r1, 8000f5c <_printf_i+0x40>)
 8000f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f5c:	08000fb5 	.word	0x08000fb5
 8000f60:	08000fc9 	.word	0x08000fc9
 8000f64:	08000f45 	.word	0x08000f45
 8000f68:	08000f45 	.word	0x08000f45
 8000f6c:	08000f45 	.word	0x08000f45
 8000f70:	08000f45 	.word	0x08000f45
 8000f74:	08000fc9 	.word	0x08000fc9
 8000f78:	08000f45 	.word	0x08000f45
 8000f7c:	08000f45 	.word	0x08000f45
 8000f80:	08000f45 	.word	0x08000f45
 8000f84:	08000f45 	.word	0x08000f45
 8000f88:	080010c9 	.word	0x080010c9
 8000f8c:	08000ff3 	.word	0x08000ff3
 8000f90:	08001083 	.word	0x08001083
 8000f94:	08000f45 	.word	0x08000f45
 8000f98:	08000f45 	.word	0x08000f45
 8000f9c:	080010eb 	.word	0x080010eb
 8000fa0:	08000f45 	.word	0x08000f45
 8000fa4:	08000ff3 	.word	0x08000ff3
 8000fa8:	08000f45 	.word	0x08000f45
 8000fac:	08000f45 	.word	0x08000f45
 8000fb0:	0800108b 	.word	0x0800108b
 8000fb4:	6833      	ldr	r3, [r6, #0]
 8000fb6:	1d1a      	adds	r2, r3, #4
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6032      	str	r2, [r6, #0]
 8000fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e09d      	b.n	8001104 <_printf_i+0x1e8>
 8000fc8:	6833      	ldr	r3, [r6, #0]
 8000fca:	6820      	ldr	r0, [r4, #0]
 8000fcc:	1d19      	adds	r1, r3, #4
 8000fce:	6031      	str	r1, [r6, #0]
 8000fd0:	0606      	lsls	r6, r0, #24
 8000fd2:	d501      	bpl.n	8000fd8 <_printf_i+0xbc>
 8000fd4:	681d      	ldr	r5, [r3, #0]
 8000fd6:	e003      	b.n	8000fe0 <_printf_i+0xc4>
 8000fd8:	0645      	lsls	r5, r0, #25
 8000fda:	d5fb      	bpl.n	8000fd4 <_printf_i+0xb8>
 8000fdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000fe0:	2d00      	cmp	r5, #0
 8000fe2:	da03      	bge.n	8000fec <_printf_i+0xd0>
 8000fe4:	232d      	movs	r3, #45	@ 0x2d
 8000fe6:	426d      	negs	r5, r5
 8000fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fec:	4859      	ldr	r0, [pc, #356]	@ (8001154 <_printf_i+0x238>)
 8000fee:	230a      	movs	r3, #10
 8000ff0:	e011      	b.n	8001016 <_printf_i+0xfa>
 8000ff2:	6821      	ldr	r1, [r4, #0]
 8000ff4:	6833      	ldr	r3, [r6, #0]
 8000ff6:	0608      	lsls	r0, r1, #24
 8000ff8:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ffc:	d402      	bmi.n	8001004 <_printf_i+0xe8>
 8000ffe:	0649      	lsls	r1, r1, #25
 8001000:	bf48      	it	mi
 8001002:	b2ad      	uxthmi	r5, r5
 8001004:	2f6f      	cmp	r7, #111	@ 0x6f
 8001006:	4853      	ldr	r0, [pc, #332]	@ (8001154 <_printf_i+0x238>)
 8001008:	6033      	str	r3, [r6, #0]
 800100a:	bf14      	ite	ne
 800100c:	230a      	movne	r3, #10
 800100e:	2308      	moveq	r3, #8
 8001010:	2100      	movs	r1, #0
 8001012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001016:	6866      	ldr	r6, [r4, #4]
 8001018:	60a6      	str	r6, [r4, #8]
 800101a:	2e00      	cmp	r6, #0
 800101c:	bfa2      	ittt	ge
 800101e:	6821      	ldrge	r1, [r4, #0]
 8001020:	f021 0104 	bicge.w	r1, r1, #4
 8001024:	6021      	strge	r1, [r4, #0]
 8001026:	b90d      	cbnz	r5, 800102c <_printf_i+0x110>
 8001028:	2e00      	cmp	r6, #0
 800102a:	d04b      	beq.n	80010c4 <_printf_i+0x1a8>
 800102c:	4616      	mov	r6, r2
 800102e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001032:	fb03 5711 	mls	r7, r3, r1, r5
 8001036:	5dc7      	ldrb	r7, [r0, r7]
 8001038:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800103c:	462f      	mov	r7, r5
 800103e:	42bb      	cmp	r3, r7
 8001040:	460d      	mov	r5, r1
 8001042:	d9f4      	bls.n	800102e <_printf_i+0x112>
 8001044:	2b08      	cmp	r3, #8
 8001046:	d10b      	bne.n	8001060 <_printf_i+0x144>
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	07df      	lsls	r7, r3, #31
 800104c:	d508      	bpl.n	8001060 <_printf_i+0x144>
 800104e:	6923      	ldr	r3, [r4, #16]
 8001050:	6861      	ldr	r1, [r4, #4]
 8001052:	4299      	cmp	r1, r3
 8001054:	bfde      	ittt	le
 8001056:	2330      	movle	r3, #48	@ 0x30
 8001058:	f806 3c01 	strble.w	r3, [r6, #-1]
 800105c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001060:	1b92      	subs	r2, r2, r6
 8001062:	6122      	str	r2, [r4, #16]
 8001064:	f8cd a000 	str.w	sl, [sp]
 8001068:	464b      	mov	r3, r9
 800106a:	aa03      	add	r2, sp, #12
 800106c:	4621      	mov	r1, r4
 800106e:	4640      	mov	r0, r8
 8001070:	f7ff fee6 	bl	8000e40 <_printf_common>
 8001074:	3001      	adds	r0, #1
 8001076:	d14a      	bne.n	800110e <_printf_i+0x1f2>
 8001078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800107c:	b004      	add	sp, #16
 800107e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	6023      	str	r3, [r4, #0]
 800108a:	4833      	ldr	r0, [pc, #204]	@ (8001158 <_printf_i+0x23c>)
 800108c:	2778      	movs	r7, #120	@ 0x78
 800108e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	6831      	ldr	r1, [r6, #0]
 8001096:	061f      	lsls	r7, r3, #24
 8001098:	f851 5b04 	ldr.w	r5, [r1], #4
 800109c:	d402      	bmi.n	80010a4 <_printf_i+0x188>
 800109e:	065f      	lsls	r7, r3, #25
 80010a0:	bf48      	it	mi
 80010a2:	b2ad      	uxthmi	r5, r5
 80010a4:	6031      	str	r1, [r6, #0]
 80010a6:	07d9      	lsls	r1, r3, #31
 80010a8:	bf44      	itt	mi
 80010aa:	f043 0320 	orrmi.w	r3, r3, #32
 80010ae:	6023      	strmi	r3, [r4, #0]
 80010b0:	b11d      	cbz	r5, 80010ba <_printf_i+0x19e>
 80010b2:	2310      	movs	r3, #16
 80010b4:	e7ac      	b.n	8001010 <_printf_i+0xf4>
 80010b6:	4827      	ldr	r0, [pc, #156]	@ (8001154 <_printf_i+0x238>)
 80010b8:	e7e9      	b.n	800108e <_printf_i+0x172>
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	f023 0320 	bic.w	r3, r3, #32
 80010c0:	6023      	str	r3, [r4, #0]
 80010c2:	e7f6      	b.n	80010b2 <_printf_i+0x196>
 80010c4:	4616      	mov	r6, r2
 80010c6:	e7bd      	b.n	8001044 <_printf_i+0x128>
 80010c8:	6833      	ldr	r3, [r6, #0]
 80010ca:	6825      	ldr	r5, [r4, #0]
 80010cc:	6961      	ldr	r1, [r4, #20]
 80010ce:	1d18      	adds	r0, r3, #4
 80010d0:	6030      	str	r0, [r6, #0]
 80010d2:	062e      	lsls	r6, r5, #24
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	d501      	bpl.n	80010dc <_printf_i+0x1c0>
 80010d8:	6019      	str	r1, [r3, #0]
 80010da:	e002      	b.n	80010e2 <_printf_i+0x1c6>
 80010dc:	0668      	lsls	r0, r5, #25
 80010de:	d5fb      	bpl.n	80010d8 <_printf_i+0x1bc>
 80010e0:	8019      	strh	r1, [r3, #0]
 80010e2:	2300      	movs	r3, #0
 80010e4:	6123      	str	r3, [r4, #16]
 80010e6:	4616      	mov	r6, r2
 80010e8:	e7bc      	b.n	8001064 <_printf_i+0x148>
 80010ea:	6833      	ldr	r3, [r6, #0]
 80010ec:	1d1a      	adds	r2, r3, #4
 80010ee:	6032      	str	r2, [r6, #0]
 80010f0:	681e      	ldr	r6, [r3, #0]
 80010f2:	6862      	ldr	r2, [r4, #4]
 80010f4:	2100      	movs	r1, #0
 80010f6:	4630      	mov	r0, r6
 80010f8:	f7ff f86a 	bl	80001d0 <memchr>
 80010fc:	b108      	cbz	r0, 8001102 <_printf_i+0x1e6>
 80010fe:	1b80      	subs	r0, r0, r6
 8001100:	6060      	str	r0, [r4, #4]
 8001102:	6863      	ldr	r3, [r4, #4]
 8001104:	6123      	str	r3, [r4, #16]
 8001106:	2300      	movs	r3, #0
 8001108:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800110c:	e7aa      	b.n	8001064 <_printf_i+0x148>
 800110e:	6923      	ldr	r3, [r4, #16]
 8001110:	4632      	mov	r2, r6
 8001112:	4649      	mov	r1, r9
 8001114:	4640      	mov	r0, r8
 8001116:	47d0      	blx	sl
 8001118:	3001      	adds	r0, #1
 800111a:	d0ad      	beq.n	8001078 <_printf_i+0x15c>
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	079b      	lsls	r3, r3, #30
 8001120:	d413      	bmi.n	800114a <_printf_i+0x22e>
 8001122:	68e0      	ldr	r0, [r4, #12]
 8001124:	9b03      	ldr	r3, [sp, #12]
 8001126:	4298      	cmp	r0, r3
 8001128:	bfb8      	it	lt
 800112a:	4618      	movlt	r0, r3
 800112c:	e7a6      	b.n	800107c <_printf_i+0x160>
 800112e:	2301      	movs	r3, #1
 8001130:	4632      	mov	r2, r6
 8001132:	4649      	mov	r1, r9
 8001134:	4640      	mov	r0, r8
 8001136:	47d0      	blx	sl
 8001138:	3001      	adds	r0, #1
 800113a:	d09d      	beq.n	8001078 <_printf_i+0x15c>
 800113c:	3501      	adds	r5, #1
 800113e:	68e3      	ldr	r3, [r4, #12]
 8001140:	9903      	ldr	r1, [sp, #12]
 8001142:	1a5b      	subs	r3, r3, r1
 8001144:	42ab      	cmp	r3, r5
 8001146:	dcf2      	bgt.n	800112e <_printf_i+0x212>
 8001148:	e7eb      	b.n	8001122 <_printf_i+0x206>
 800114a:	2500      	movs	r5, #0
 800114c:	f104 0619 	add.w	r6, r4, #25
 8001150:	e7f5      	b.n	800113e <_printf_i+0x222>
 8001152:	bf00      	nop
 8001154:	08001268 	.word	0x08001268
 8001158:	08001279 	.word	0x08001279

0800115c <memmove>:
 800115c:	4288      	cmp	r0, r1
 800115e:	b510      	push	{r4, lr}
 8001160:	eb01 0402 	add.w	r4, r1, r2
 8001164:	d902      	bls.n	800116c <memmove+0x10>
 8001166:	4284      	cmp	r4, r0
 8001168:	4623      	mov	r3, r4
 800116a:	d807      	bhi.n	800117c <memmove+0x20>
 800116c:	1e43      	subs	r3, r0, #1
 800116e:	42a1      	cmp	r1, r4
 8001170:	d008      	beq.n	8001184 <memmove+0x28>
 8001172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800117a:	e7f8      	b.n	800116e <memmove+0x12>
 800117c:	4402      	add	r2, r0
 800117e:	4601      	mov	r1, r0
 8001180:	428a      	cmp	r2, r1
 8001182:	d100      	bne.n	8001186 <memmove+0x2a>
 8001184:	bd10      	pop	{r4, pc}
 8001186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800118a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800118e:	e7f7      	b.n	8001180 <memmove+0x24>

08001190 <_sbrk_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	4d06      	ldr	r5, [pc, #24]	@ (80011ac <_sbrk_r+0x1c>)
 8001194:	2300      	movs	r3, #0
 8001196:	4604      	mov	r4, r0
 8001198:	4608      	mov	r0, r1
 800119a:	602b      	str	r3, [r5, #0]
 800119c:	f7ff faea 	bl	8000774 <_sbrk>
 80011a0:	1c43      	adds	r3, r0, #1
 80011a2:	d102      	bne.n	80011aa <_sbrk_r+0x1a>
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	b103      	cbz	r3, 80011aa <_sbrk_r+0x1a>
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
 80011ac:	200001b4 	.word	0x200001b4

080011b0 <memcpy>:
 80011b0:	440a      	add	r2, r1
 80011b2:	4291      	cmp	r1, r2
 80011b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80011b8:	d100      	bne.n	80011bc <memcpy+0xc>
 80011ba:	4770      	bx	lr
 80011bc:	b510      	push	{r4, lr}
 80011be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80011c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80011c6:	4291      	cmp	r1, r2
 80011c8:	d1f9      	bne.n	80011be <memcpy+0xe>
 80011ca:	bd10      	pop	{r4, pc}

080011cc <_realloc_r>:
 80011cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d0:	4680      	mov	r8, r0
 80011d2:	4615      	mov	r5, r2
 80011d4:	460c      	mov	r4, r1
 80011d6:	b921      	cbnz	r1, 80011e2 <_realloc_r+0x16>
 80011d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011dc:	4611      	mov	r1, r2
 80011de:	f7ff bc4b 	b.w	8000a78 <_malloc_r>
 80011e2:	b92a      	cbnz	r2, 80011f0 <_realloc_r+0x24>
 80011e4:	f7ff fbdc 	bl	80009a0 <_free_r>
 80011e8:	2400      	movs	r4, #0
 80011ea:	4620      	mov	r0, r4
 80011ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011f0:	f000 f81a 	bl	8001228 <_malloc_usable_size_r>
 80011f4:	4285      	cmp	r5, r0
 80011f6:	4606      	mov	r6, r0
 80011f8:	d802      	bhi.n	8001200 <_realloc_r+0x34>
 80011fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80011fe:	d8f4      	bhi.n	80011ea <_realloc_r+0x1e>
 8001200:	4629      	mov	r1, r5
 8001202:	4640      	mov	r0, r8
 8001204:	f7ff fc38 	bl	8000a78 <_malloc_r>
 8001208:	4607      	mov	r7, r0
 800120a:	2800      	cmp	r0, #0
 800120c:	d0ec      	beq.n	80011e8 <_realloc_r+0x1c>
 800120e:	42b5      	cmp	r5, r6
 8001210:	462a      	mov	r2, r5
 8001212:	4621      	mov	r1, r4
 8001214:	bf28      	it	cs
 8001216:	4632      	movcs	r2, r6
 8001218:	f7ff ffca 	bl	80011b0 <memcpy>
 800121c:	4621      	mov	r1, r4
 800121e:	4640      	mov	r0, r8
 8001220:	f7ff fbbe 	bl	80009a0 <_free_r>
 8001224:	463c      	mov	r4, r7
 8001226:	e7e0      	b.n	80011ea <_realloc_r+0x1e>

08001228 <_malloc_usable_size_r>:
 8001228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800122c:	1f18      	subs	r0, r3, #4
 800122e:	2b00      	cmp	r3, #0
 8001230:	bfbc      	itt	lt
 8001232:	580b      	ldrlt	r3, [r1, r0]
 8001234:	18c0      	addlt	r0, r0, r3
 8001236:	4770      	bx	lr

08001238 <_init>:
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	bf00      	nop
 800123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123e:	bc08      	pop	{r3}
 8001240:	469e      	mov	lr, r3
 8001242:	4770      	bx	lr

08001244 <_fini>:
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	bf00      	nop
 8001248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124a:	bc08      	pop	{r3}
 800124c:	469e      	mov	lr, r3
 800124e:	4770      	bx	lr
