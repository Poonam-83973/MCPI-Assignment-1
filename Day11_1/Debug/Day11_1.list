
Day11_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800044c  0800044c  0000144c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000450  08000450  00001450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000454  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001608  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005de  00000000  00000000  00003636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000001a9  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000d0  00000000  00000000  00003dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000a5  00000000  00000000  00003e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000180b0  00000000  00000000  00003f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001594  00000000  00000000  0001bfe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008bd0f  00000000  00000000  0001d579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000a9288  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000124  00000000  00000000  000a92cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  000a93f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000434 	.word	0x08000434

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000434 	.word	0x08000434

080001c8 <main>:
#endif

/*1. Implement PWM on Timer8. Increase duty cycle by 10 on each switch press (handle interrupt). Optional part: On next switch press decrease value by 10.*/
extern volatile int count_flag;
int main(void)
{
 80001c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int duty = 0;
    int rev = 0;
    SystemInit();
 80001ca:	f000 f889 	bl	80002e0 <SystemInit>
    SwitchInit(SWITCH);
 80001ce:	2000      	movs	r0, #0
 80001d0:	f000 f844 	bl	800025c <SwitchInit>
    TimerInit();
 80001d4:	f000 f8a6 	bl	8000324 <TimerInit>
#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
	uint32_t init_ticks = DWT->CYCCNT;
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000248 <main+0x80>)
 80001da:	4b1c      	ldr	r3, [pc, #112]	@ (800024c <main+0x84>)
 80001dc:	f8d2 e000 	ldr.w	lr, [r2]
    		count_flag = 0;
    	}
    	else if(rev >= 10 && rev < 20)
    	{
    		duty -=10;
    		TIM8->CCR1 = duty;
 80001e0:	4f1b      	ldr	r7, [pc, #108]	@ (8000250 <main+0x88>)
 80001e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000254 <main+0x8c>)
	uint32_t init_ticks = DWT->CYCCNT;
 80001e4:	491c      	ldr	r1, [pc, #112]	@ (8000258 <main+0x90>)
    int rev = 0;
 80001e6:	f04f 0c00 	mov.w	ip, #0
	uint32_t ticks = (SystemCoreClock / 1000);
 80001ea:	fba3 3e0e 	umull	r3, lr, r3, lr
 80001ee:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
    int duty = 0;
 80001f2:	4665      	mov	r5, ip
       		DelayMs(50);
       		rev++;
       		count_flag = 0;
 80001f4:	4666      	mov	r6, ip
    	while(count_flag == 0)
 80001f6:	6813      	ldr	r3, [r2, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d0fc      	beq.n	80001f6 <main+0x2e>
    	if(rev < 10)
 80001fc:	f1bc 0f09 	cmp.w	ip, #9
 8000200:	dc0d      	bgt.n	800021e <main+0x56>
    		duty +=10;
 8000202:	350a      	adds	r5, #10
    		TIM8->CCR1 = duty;
 8000204:	637d      	str	r5, [r7, #52]	@ 0x34
    		DelayMs(50);
 8000206:	2032      	movs	r0, #50	@ 0x32
	uint32_t init_ticks = DWT->CYCCNT;
 8000208:	684c      	ldr	r4, [r1, #4]
	ms *= ticks;
 800020a:	fb0e f000 	mul.w	r0, lr, r0
	while ((DWT->CYCCNT - init_ticks) < ms);
 800020e:	684b      	ldr	r3, [r1, #4]
 8000210:	1b1b      	subs	r3, r3, r4
 8000212:	4283      	cmp	r3, r0
 8000214:	d3fb      	bcc.n	800020e <main+0x46>
       		rev++;
 8000216:	f10c 0c01 	add.w	ip, ip, #1
       		count_flag = 0;
 800021a:	6016      	str	r6, [r2, #0]
 800021c:	e7eb      	b.n	80001f6 <main+0x2e>
    	else if(rev >= 10 && rev < 20)
 800021e:	f1bc 0f14 	cmp.w	ip, #20
 8000222:	d102      	bne.n	800022a <main+0x62>
    	}
    	else
    		rev = 0;
 8000224:	f04f 0c00 	mov.w	ip, #0
 8000228:	e7e5      	b.n	80001f6 <main+0x2e>
    		duty -=10;
 800022a:	3d0a      	subs	r5, #10
    		TIM8->CCR1 = duty;
 800022c:	637d      	str	r5, [r7, #52]	@ 0x34
       		DelayMs(50);
 800022e:	2032      	movs	r0, #50	@ 0x32
	uint32_t init_ticks = DWT->CYCCNT;
 8000230:	684c      	ldr	r4, [r1, #4]
	ms *= ticks;
 8000232:	fb00 f00e 	mul.w	r0, r0, lr
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000236:	684b      	ldr	r3, [r1, #4]
 8000238:	1b1b      	subs	r3, r3, r4
 800023a:	4283      	cmp	r3, r0
 800023c:	d3fb      	bcc.n	8000236 <main+0x6e>
       		rev++;
 800023e:	f10c 0c01 	add.w	ip, ip, #1
       		count_flag = 0;
 8000242:	6016      	str	r6, [r2, #0]
 8000244:	e7d7      	b.n	80001f6 <main+0x2e>
 8000246:	bf00      	nop
 8000248:	20000000 	.word	0x20000000
 800024c:	10624dd3 	.word	0x10624dd3
 8000250:	40010400 	.word	0x40010400
 8000254:	20000020 	.word	0x20000020
 8000258:	e0001000 	.word	0xe0001000

0800025c <SwitchInit>:
#include "switch.h"

void SwitchInit(uint32_t pin){
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 800025c:	4916      	ldr	r1, [pc, #88]	@ (80002b8 <SwitchInit+0x5c>)
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800025e:	4a17      	ldr	r2, [pc, #92]	@ (80002bc <SwitchInit+0x60>)
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 8000260:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8000262:	f043 0301 	orr.w	r3, r3, #1
void SwitchInit(uint32_t pin){
 8000266:	b410      	push	{r4}
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000268:	0040      	lsls	r0, r0, #1
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 800026a:	630b      	str	r3, [r1, #48]	@ 0x30
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800026c:	2101      	movs	r1, #1
 800026e:	1843      	adds	r3, r0, r1
 8000270:	6814      	ldr	r4, [r2, #0]
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
 8000276:	4081      	lsls	r1, r0
 8000278:	430b      	orrs	r3, r1
 800027a:	ea24 0403 	bic.w	r4, r4, r3
 800027e:	6014      	str	r4, [r2, #0]
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000280:	6890      	ldr	r0, [r2, #8]
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
	EXTI->FTSR |= BV(SWITCH);
 8000282:	490f      	ldr	r1, [pc, #60]	@ (80002c0 <SwitchInit+0x64>)
	EXTI->IMR |= BV(SWITCH);
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
	NVIC_EnableIRQ(EXTI0_IRQn);
}
 8000284:	bc10      	pop	{r4}
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000286:	ea20 0003 	bic.w	r0, r0, r3
 800028a:	6090      	str	r0, [r2, #8]
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800028c:	68d0      	ldr	r0, [r2, #12]
 800028e:	ea20 0303 	bic.w	r3, r0, r3
 8000292:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= BV(SWITCH);
 8000294:	68cb      	ldr	r3, [r1, #12]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000296:	480b      	ldr	r0, [pc, #44]	@ (80002c4 <SwitchInit+0x68>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	60cb      	str	r3, [r1, #12]
	EXTI->IMR |= BV(SWITCH);
 800029e:	680b      	ldr	r3, [r1, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 80002a0:	f5a2 4248 	sub.w	r2, r2, #51200	@ 0xc800
	EXTI->IMR |= BV(SWITCH);
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	600b      	str	r3, [r1, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 80002aa:	6893      	ldr	r3, [r2, #8]
 80002ac:	2140      	movs	r1, #64	@ 0x40
 80002ae:	f023 030f 	bic.w	r3, r3, #15
 80002b2:	6093      	str	r3, [r2, #8]
 80002b4:	6001      	str	r1, [r0, #0]
}
 80002b6:	4770      	bx	lr
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000
 80002c0:	40013c00 	.word	0x40013c00
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <EXTI0_IRQHandler>:
}

volatile int count_flag = 0;

void EXTI0_IRQHandler(void){
	EXTI->PR |= BV(SWITCH);
 80002c8:	4a03      	ldr	r2, [pc, #12]	@ (80002d8 <EXTI0_IRQHandler+0x10>)
	count_flag = 1;
 80002ca:	4904      	ldr	r1, [pc, #16]	@ (80002dc <EXTI0_IRQHandler+0x14>)
	EXTI->PR |= BV(SWITCH);
 80002cc:	6953      	ldr	r3, [r2, #20]
	count_flag = 1;
 80002ce:	2001      	movs	r0, #1
	EXTI->PR |= BV(SWITCH);
 80002d0:	4303      	orrs	r3, r0
 80002d2:	6153      	str	r3, [r2, #20]
	count_flag = 1;
 80002d4:	6008      	str	r0, [r1, #0]
}
 80002d6:	4770      	bx	lr
 80002d8:	40013c00 	.word	0x40013c00
 80002dc:	20000020 	.word	0x20000020

080002e0 <SystemInit>:


uint32_t DWT_Init(void)
{
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80002e0:	4a0e      	ldr	r2, [pc, #56]	@ (800031c <SystemInit+0x3c>)
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80002e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <SystemInit+0x40>)
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80002e4:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 80002e8:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80002ec:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80002f0:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 80002f4:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 80002f8:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	f022 0201 	bic.w	r2, r2, #1
 8000302:	601a      	str	r2, [r3, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000304:	681a      	ldr	r2, [r3, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000306:	2000      	movs	r0, #0
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000308:	f042 0201 	orr.w	r2, r2, #1
 800030c:	601a      	str	r2, [r3, #0]
    DWT->CYCCNT = 0;
 800030e:	6058      	str	r0, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000310:	bf00      	nop
    __ASM volatile ("NOP");
 8000312:	bf00      	nop
    __ASM volatile ("NOP");
 8000314:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000316:	685b      	ldr	r3, [r3, #4]
}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000ed00 	.word	0xe000ed00
 8000320:	e0001000 	.word	0xe0001000

08000324 <TimerInit>:
7. Enable main output in BDTR and Enable the counter.
*/

void TimerInit(void) {
    // Enable GPIO clock for port C.6
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000324:	4a19      	ldr	r2, [pc, #100]	@ (800038c <TimerInit+0x68>)
    // Configure PC6 as alternate function mode
    GPIOC->MODER |= (2 << 6*2);
 8000326:	491a      	ldr	r1, [pc, #104]	@ (8000390 <TimerInit+0x6c>)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000328:	6b10      	ldr	r0, [r2, #48]	@ 0x30

    // Enable Timer8 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;

    // Set prescaler value
    TIM8->PSC = (TIM_PSC-1);  // Prescaler value
 800032a:	4b1a      	ldr	r3, [pc, #104]	@ (8000394 <TimerInit+0x70>)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800032c:	f040 0004 	orr.w	r0, r0, #4
void TimerInit(void) {
 8000330:	b410      	push	{r4}
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000332:	6310      	str	r0, [r2, #48]	@ 0x30
    GPIOC->MODER |= (2 << 6*2);
 8000334:	6808      	ldr	r0, [r1, #0]
 8000336:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 800033a:	6008      	str	r0, [r1, #0]
    GPIOC->AFR[0] |= (3 << GPIO_AFRL_AFSEL6_Pos);
 800033c:	6a08      	ldr	r0, [r1, #32]
 800033e:	f040 7040 	orr.w	r0, r0, #50331648	@ 0x3000000
 8000342:	6208      	str	r0, [r1, #32]
    RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000344:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8000346:	f041 0102 	orr.w	r1, r1, #2
 800034a:	6451      	str	r1, [r2, #68]	@ 0x44
    TIM8->PSC = (TIM_PSC-1);  // Prescaler value
 800034c:	240f      	movs	r4, #15
    // Set ARR value to 100 for 10KHz PWM output freq
    TIM8->ARR = (100-1);
    // Set CCR value i.e. Duty Cycle (must be less than ARR value)
    TIM8->CCR1 = 1-1;
 800034e:	2200      	movs	r2, #0
    TIM8->ARR = (100-1);
 8000350:	2063      	movs	r0, #99	@ 0x63
    TIM8->PSC = (TIM_PSC-1);  // Prescaler value
 8000352:	629c      	str	r4, [r3, #40]	@ 0x28
    TIM8->ARR = (100-1);
 8000354:	62d8      	str	r0, [r3, #44]	@ 0x2c
    TIM8->CCR1 = 1-1;
 8000356:	635a      	str	r2, [r3, #52]	@ 0x34
    // Configure Timer8 channels as output channel
    //TIM8->CCMR1 &= ~TIM_CCMR1_CC1S;	// default
    // Configure Timer8 channel polarity as active high
    //TIM8->CCER &= ~TIM_CCER_CC1P;		// default
    // Configure Timer8 for output compare mode
    TIM8->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; // PWM Mode 1 => 110
 8000358:	699a      	ldr	r2, [r3, #24]
    TIM8->CCER |= TIM_CCER_CC1E;

    // Enable Timer 8 Main output and Timer8 peripheral
    TIM8->BDTR |= TIM_BDTR_MOE;
    TIM8->CR1 |= TIM_CR1_CEN;
}
 800035a:	bc10      	pop	{r4}
    TIM8->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; // PWM Mode 1 => 110
 800035c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8000360:	619a      	str	r2, [r3, #24]
    TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 8000362:	699a      	ldr	r2, [r3, #24]
 8000364:	f042 0208 	orr.w	r2, r2, #8
 8000368:	619a      	str	r2, [r3, #24]
    TIM8->CR1 |= TIM_CR1_ARPE;
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000370:	601a      	str	r2, [r3, #0]
    TIM8->CCER |= TIM_CCER_CC1E;
 8000372:	6a1a      	ldr	r2, [r3, #32]
 8000374:	f042 0201 	orr.w	r2, r2, #1
 8000378:	621a      	str	r2, [r3, #32]
    TIM8->BDTR |= TIM_BDTR_MOE;
 800037a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800037c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000380:	645a      	str	r2, [r3, #68]	@ 0x44
    TIM8->CR1 |= TIM_CR1_CEN;
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	f042 0201 	orr.w	r2, r2, #1
 8000388:	601a      	str	r2, [r3, #0]
}
 800038a:	4770      	bx	lr
 800038c:	40023800 	.word	0x40023800
 8000390:	40020800 	.word	0x40020800
 8000394:	40010400 	.word	0x40010400

08000398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000398:	480d      	ldr	r0, [pc, #52]	@ (80003d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800039c:	f7ff ffa0 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	@ (80003d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	@ (80003d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	@ (80003dc <LoopForever+0xe>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	@ (80003e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	@ (80003e4 <LoopForever+0x16>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c6:	f000 f811 	bl	80003ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff fefd 	bl	80001c8 <main>

080003ce <LoopForever>:

LoopForever:
  b LoopForever
 80003ce:	e7fe      	b.n	80003ce <LoopForever>
  ldr   r0, =_estack
 80003d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003dc:	08000454 	.word	0x08000454
  ldr r2, =_sbss
 80003e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003e4:	20000024 	.word	0x20000024

080003e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC_IRQHandler>
	...

080003ec <__libc_init_array>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000424 <__libc_init_array+0x38>)
 80003f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000428 <__libc_init_array+0x3c>)
 80003f2:	1b64      	subs	r4, r4, r5
 80003f4:	10a4      	asrs	r4, r4, #2
 80003f6:	2600      	movs	r6, #0
 80003f8:	42a6      	cmp	r6, r4
 80003fa:	d109      	bne.n	8000410 <__libc_init_array+0x24>
 80003fc:	4d0b      	ldr	r5, [pc, #44]	@ (800042c <__libc_init_array+0x40>)
 80003fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000430 <__libc_init_array+0x44>)
 8000400:	f000 f818 	bl	8000434 <_init>
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	10a4      	asrs	r4, r4, #2
 8000408:	2600      	movs	r6, #0
 800040a:	42a6      	cmp	r6, r4
 800040c:	d105      	bne.n	800041a <__libc_init_array+0x2e>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	f855 3b04 	ldr.w	r3, [r5], #4
 8000414:	4798      	blx	r3
 8000416:	3601      	adds	r6, #1
 8000418:	e7ee      	b.n	80003f8 <__libc_init_array+0xc>
 800041a:	f855 3b04 	ldr.w	r3, [r5], #4
 800041e:	4798      	blx	r3
 8000420:	3601      	adds	r6, #1
 8000422:	e7f2      	b.n	800040a <__libc_init_array+0x1e>
 8000424:	0800044c 	.word	0x0800044c
 8000428:	0800044c 	.word	0x0800044c
 800042c:	0800044c 	.word	0x0800044c
 8000430:	08000450 	.word	0x08000450

08000434 <_init>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr

08000440 <_fini>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr
